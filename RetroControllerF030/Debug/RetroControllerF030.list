
RetroControllerF030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002830  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080028f0  080028f0  000128f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029f0  080029f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080029f0  080029f0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029f0  080029f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029f0  080029f0  000129f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080029f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001024  20000074  08002a6c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001098  08002a6c  00021098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008beb  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da6  00000000  00000000  00028c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  0002aa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002b278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001121d  00000000  00000000  0002b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a88  00000000  00000000  0003cbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000600c7  00000000  00000000  0004666d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a6734  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed4  00000000  00000000  000a6784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080028d8 	.word	0x080028d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080028d8 	.word	0x080028d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_ZN12InputManagerC1Ev>:
 *      Author: Beheerder
 */

#include "InputManager.h"

InputManager::InputManager() {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	4a06      	ldr	r2, [pc, #24]	; (8000244 <_ZN12InputManagerC1Ev+0x24>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
	inputMovementResult = 0;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2200      	movs	r2, #0
 8000232:	711a      	strb	r2, [r3, #4]
	inputShootResult = 0;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2200      	movs	r2, #0
 8000238:	715a      	strb	r2, [r3, #5]

}
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	b002      	add	sp, #8
 8000242:	bd80      	pop	{r7, pc}
 8000244:	08002978 	.word	0x08002978

08000248 <_ZN12InputManagerD1Ev>:

InputManager::~InputManager() {
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	4a03      	ldr	r2, [pc, #12]	; (8000260 <_ZN12InputManagerD1Ev+0x18>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	0018      	movs	r0, r3
 800025a:	46bd      	mov	sp, r7
 800025c:	b002      	add	sp, #8
 800025e:	bd80      	pop	{r7, pc}
 8000260:	08002978 	.word	0x08002978

08000264 <_ZN12InputManagerD0Ev>:
InputManager::~InputManager() {
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
}
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	0018      	movs	r0, r3
 8000270:	f7ff ffea 	bl	8000248 <_ZN12InputManagerD1Ev>
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2108      	movs	r1, #8
 8000278:	0018      	movs	r0, r3
 800027a:	f002 fa1f 	bl	80026bc <_ZdlPvj>
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	46bd      	mov	sp, r7
 8000284:	b002      	add	sp, #8
 8000286:	bd80      	pop	{r7, pc}

08000288 <_ZN12InputManager9readInputEhb>:


void InputManager::readInput(uint8_t controllerMovement, bool controllerShoot) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	0008      	movs	r0, r1
 8000292:	0011      	movs	r1, r2
 8000294:	1cfb      	adds	r3, r7, #3
 8000296:	1c02      	adds	r2, r0, #0
 8000298:	701a      	strb	r2, [r3, #0]
 800029a:	1cbb      	adds	r3, r7, #2
 800029c:	1c0a      	adds	r2, r1, #0
 800029e:	701a      	strb	r2, [r3, #0]
	// switch case to check movement inputs from 0 to 9
	// 0 being middle, 1 is up and rest continues clockwards.
	switch(controllerMovement) {
 80002a0:	1cfb      	adds	r3, r7, #3
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b0a      	cmp	r3, #10
 80002a6:	d828      	bhi.n	80002fa <_ZN12InputManager9readInputEhb+0x72>
 80002a8:	009a      	lsls	r2, r3, #2
 80002aa:	4b1d      	ldr	r3, [pc, #116]	; (8000320 <_ZN12InputManager9readInputEhb+0x98>)
 80002ac:	18d3      	adds	r3, r2, r3
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	469f      	mov	pc, r3
	case 0: // middle
		inputMovementResult = 0;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2200      	movs	r2, #0
 80002b6:	711a      	strb	r2, [r3, #4]
		break;
 80002b8:	e023      	b.n	8000302 <_ZN12InputManager9readInputEhb+0x7a>
	case 1: // up
		inputMovementResult = 1;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2201      	movs	r2, #1
 80002be:	711a      	strb	r2, [r3, #4]
		break;
 80002c0:	e01f      	b.n	8000302 <_ZN12InputManager9readInputEhb+0x7a>
	case 9: // top right
		inputMovementResult = 2;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2202      	movs	r2, #2
 80002c6:	711a      	strb	r2, [r3, #4]
		break;
 80002c8:	e01b      	b.n	8000302 <_ZN12InputManager9readInputEhb+0x7a>
	case 8: // right
		inputMovementResult = 3;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2203      	movs	r2, #3
 80002ce:	711a      	strb	r2, [r3, #4]
		break;
 80002d0:	e017      	b.n	8000302 <_ZN12InputManager9readInputEhb+0x7a>
	case 10: // bottom right
		inputMovementResult = 4;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2204      	movs	r2, #4
 80002d6:	711a      	strb	r2, [r3, #4]
		break;
 80002d8:	e013      	b.n	8000302 <_ZN12InputManager9readInputEhb+0x7a>
	case 2: // bottom
		inputMovementResult = 5;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2205      	movs	r2, #5
 80002de:	711a      	strb	r2, [r3, #4]
		break;
 80002e0:	e00f      	b.n	8000302 <_ZN12InputManager9readInputEhb+0x7a>
	case 6: // bottom left
		inputMovementResult = 6;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2206      	movs	r2, #6
 80002e6:	711a      	strb	r2, [r3, #4]
		break;
 80002e8:	e00b      	b.n	8000302 <_ZN12InputManager9readInputEhb+0x7a>
	case 4: // left
		inputMovementResult = 7;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2207      	movs	r2, #7
 80002ee:	711a      	strb	r2, [r3, #4]
		break;
 80002f0:	e007      	b.n	8000302 <_ZN12InputManager9readInputEhb+0x7a>
	case 5: // top left
		inputMovementResult = 8;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2208      	movs	r2, #8
 80002f6:	711a      	strb	r2, [r3, #4]
		break;
 80002f8:	e003      	b.n	8000302 <_ZN12InputManager9readInputEhb+0x7a>
	default:
		inputMovementResult = 0;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2200      	movs	r2, #0
 80002fe:	711a      	strb	r2, [r3, #4]
		break;
 8000300:	46c0      	nop			; (mov r8, r8)
	}

	// checks and sets shoot button
	if(controllerShoot) {
 8000302:	1cbb      	adds	r3, r7, #2
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d002      	beq.n	8000310 <_ZN12InputManager9readInputEhb+0x88>
		inputShootResult = 1;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2201      	movs	r2, #1
 800030e:	715a      	strb	r2, [r3, #5]
	}


	inputMovementResult = controllerMovement;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	1cfa      	adds	r2, r7, #3
 8000314:	7812      	ldrb	r2, [r2, #0]
 8000316:	711a      	strb	r2, [r3, #4]
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b002      	add	sp, #8
 800031e:	bd80      	pop	{r7, pc}
 8000320:	08002944 	.word	0x08002944

08000324 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	4a06      	ldr	r2, [pc, #24]	; (800034c <vApplicationGetIdleTaskMemory+0x28>)
 8000334:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	4a05      	ldr	r2, [pc, #20]	; (8000350 <vApplicationGetIdleTaskMemory+0x2c>)
 800033a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2280      	movs	r2, #128	; 0x80
 8000340:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	b004      	add	sp, #16
 8000348:	bd80      	pop	{r7, pc}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	20000090 	.word	0x20000090
 8000350:	20000144 	.word	0x20000144

08000354 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b089      	sub	sp, #36	; 0x24
 8000358:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800035a:	f000 f9cd 	bl	80006f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800035e:	f000 f819 	bl	8000394 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000362:	f000 f85f 	bl	8000424 <_ZL12MX_GPIO_Initv>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of InputManager */
	osThreadDef(InputManager, InputRead, osPriorityNormal, 0, 128);
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4a08      	ldr	r2, [pc, #32]	; (800038c <main+0x38>)
 800036a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800036c:	c313      	stmia	r3!, {r0, r1, r4}
 800036e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000370:	c313      	stmia	r3!, {r0, r1, r4}
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	601a      	str	r2, [r3, #0]
	InputManagerHandle = osThreadCreate(osThread(InputManager), NULL);
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2100      	movs	r1, #0
 800037a:	0018      	movs	r0, r3
 800037c:	f001 f8cf 	bl	800151e <osThreadCreate>
 8000380:	0002      	movs	r2, r0
 8000382:	4b03      	ldr	r3, [pc, #12]	; (8000390 <main+0x3c>)
 8000384:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000386:	f001 f8c2 	bl	800150e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800038a:	e7fe      	b.n	800038a <main+0x36>
 800038c:	08002900 	.word	0x08002900
 8000390:	20000344 	.word	0x20000344

08000394 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000394:	b590      	push	{r4, r7, lr}
 8000396:	b091      	sub	sp, #68	; 0x44
 8000398:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800039a:	2410      	movs	r4, #16
 800039c:	193b      	adds	r3, r7, r4
 800039e:	0018      	movs	r0, r3
 80003a0:	2330      	movs	r3, #48	; 0x30
 80003a2:	001a      	movs	r2, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	f002 f9c1 	bl	800272c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003aa:	003b      	movs	r3, r7
 80003ac:	0018      	movs	r0, r3
 80003ae:	2310      	movs	r3, #16
 80003b0:	001a      	movs	r2, r3
 80003b2:	2100      	movs	r1, #0
 80003b4:	f002 f9ba 	bl	800272c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b8:	0021      	movs	r1, r4
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2202      	movs	r2, #2
 80003be:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2201      	movs	r2, #1
 80003c4:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2210      	movs	r2, #16
 80003ca:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2200      	movs	r2, #0
 80003d0:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	0018      	movs	r0, r3
 80003d6:	f000 fc35 	bl	8000c44 <HAL_RCC_OscConfig>
 80003da:	0003      	movs	r3, r0
 80003dc:	1e5a      	subs	r2, r3, #1
 80003de:	4193      	sbcs	r3, r2
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <_Z18SystemClock_Configv+0x56>
		Error_Handler();
 80003e6:	f000 f913 	bl	8000610 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003ea:	003b      	movs	r3, r7
 80003ec:	2207      	movs	r2, #7
 80003ee:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f0:	003b      	movs	r3, r7
 80003f2:	2200      	movs	r2, #0
 80003f4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f6:	003b      	movs	r3, r7
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fc:	003b      	movs	r3, r7
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000402:	003b      	movs	r3, r7
 8000404:	2100      	movs	r1, #0
 8000406:	0018      	movs	r0, r3
 8000408:	f000 ff36 	bl	8001278 <HAL_RCC_ClockConfig>
 800040c:	0003      	movs	r3, r0
 800040e:	1e5a      	subs	r2, r3, #1
 8000410:	4193      	sbcs	r3, r2
 8000412:	b2db      	uxtb	r3, r3
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <_Z18SystemClock_Configv+0x88>
		Error_Handler();
 8000418:	f000 f8fa 	bl	8000610 <Error_Handler>
	}
}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b011      	add	sp, #68	; 0x44
 8000422:	bd90      	pop	{r4, r7, pc}

08000424 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b089      	sub	sp, #36	; 0x24
 8000428:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800042a:	240c      	movs	r4, #12
 800042c:	193b      	adds	r3, r7, r4
 800042e:	0018      	movs	r0, r3
 8000430:	2314      	movs	r3, #20
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f002 f979 	bl	800272c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b2f      	ldr	r3, [pc, #188]	; (80004f8 <_ZL12MX_GPIO_Initv+0xd4>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b2e      	ldr	r3, [pc, #184]	; (80004f8 <_ZL12MX_GPIO_Initv+0xd4>)
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	0289      	lsls	r1, r1, #10
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <_ZL12MX_GPIO_Initv+0xd4>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	029b      	lsls	r3, r3, #10
 8000450:	4013      	ands	r3, r2
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000456:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <_ZL12MX_GPIO_Initv+0xd4>)
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <_ZL12MX_GPIO_Initv+0xd4>)
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	0309      	lsls	r1, r1, #12
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <_ZL12MX_GPIO_Initv+0xd4>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	031b      	lsls	r3, r3, #12
 800046c:	4013      	ands	r3, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <_ZL12MX_GPIO_Initv+0xd4>)
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	4b20      	ldr	r3, [pc, #128]	; (80004f8 <_ZL12MX_GPIO_Initv+0xd4>)
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	02c9      	lsls	r1, r1, #11
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b1d      	ldr	r3, [pc, #116]	; (80004f8 <_ZL12MX_GPIO_Initv+0xd4>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	02db      	lsls	r3, r3, #11
 8000488:	4013      	ands	r3, r2
 800048a:	603b      	str	r3, [r7, #0]
 800048c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : PA6 PA7 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	22b0      	movs	r2, #176	; 0xb0
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2200      	movs	r2, #0
 800049a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2202      	movs	r2, #2
 80004a0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a2:	193a      	adds	r2, r7, r4
 80004a4:	2390      	movs	r3, #144	; 0x90
 80004a6:	05db      	lsls	r3, r3, #23
 80004a8:	0011      	movs	r1, r2
 80004aa:	0018      	movs	r0, r3
 80004ac:	f000 fa3c 	bl	8000928 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2202      	movs	r2, #2
 80004c0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	4a0d      	ldr	r2, [pc, #52]	; (80004fc <_ZL12MX_GPIO_Initv+0xd8>)
 80004c6:	0019      	movs	r1, r3
 80004c8:	0010      	movs	r0, r2
 80004ca:	f000 fa2d 	bl	8000928 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004ce:	0021      	movs	r1, r4
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2240      	movs	r2, #64	; 0x40
 80004d4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2202      	movs	r2, #2
 80004e0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <_ZL12MX_GPIO_Initv+0xdc>)
 80004e6:	0019      	movs	r1, r3
 80004e8:	0010      	movs	r0, r2
 80004ea:	f000 fa1d 	bl	8000928 <HAL_GPIO_Init>

}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b009      	add	sp, #36	; 0x24
 80004f4:	bd90      	pop	{r4, r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	40021000 	.word	0x40021000
 80004fc:	48000800 	.word	0x48000800
 8000500:	48000400 	.word	0x48000400

08000504 <_Z9InputReadPKv>:
 * @brief  Function implementing the InputManager thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_InputRead */
void InputRead(void const *argument) {
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {
		osDelay(500);
 800050c:	23fa      	movs	r3, #250	; 0xfa
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	0018      	movs	r0, r3
 8000512:	f001 f851 	bl	80015b8 <osDelay>
		InputManager inputmanager;
 8000516:	2308      	movs	r3, #8
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	0018      	movs	r0, r3
 800051c:	f7ff fe80 	bl	8000220 <_ZN12InputManagerC1Ev>

		// reads controller inputs
		bool up = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6); // 1
 8000520:	2390      	movs	r3, #144	; 0x90
 8000522:	05db      	lsls	r3, r3, #23
 8000524:	2140      	movs	r1, #64	; 0x40
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fb6e 	bl	8000c08 <HAL_GPIO_ReadPin>
 800052c:	0003      	movs	r3, r0
 800052e:	001a      	movs	r2, r3
 8000530:	2417      	movs	r4, #23
 8000532:	193b      	adds	r3, r7, r4
 8000534:	1e51      	subs	r1, r2, #1
 8000536:	418a      	sbcs	r2, r1
 8000538:	701a      	strb	r2, [r3, #0]
		bool down = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7); // 2
 800053a:	2390      	movs	r3, #144	; 0x90
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	0018      	movs	r0, r3
 8000542:	f000 fb61 	bl	8000c08 <HAL_GPIO_ReadPin>
 8000546:	0003      	movs	r3, r0
 8000548:	001a      	movs	r2, r3
 800054a:	2516      	movs	r5, #22
 800054c:	197b      	adds	r3, r7, r5
 800054e:	1e51      	subs	r1, r2, #1
 8000550:	418a      	sbcs	r2, r1
 8000552:	701a      	strb	r2, [r3, #0]
		bool left = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6); // 4
 8000554:	4b2c      	ldr	r3, [pc, #176]	; (8000608 <_Z9InputReadPKv+0x104>)
 8000556:	2140      	movs	r1, #64	; 0x40
 8000558:	0018      	movs	r0, r3
 800055a:	f000 fb55 	bl	8000c08 <HAL_GPIO_ReadPin>
 800055e:	0003      	movs	r3, r0
 8000560:	001a      	movs	r2, r3
 8000562:	2315      	movs	r3, #21
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	1e51      	subs	r1, r2, #1
 8000568:	418a      	sbcs	r2, r1
 800056a:	701a      	strb	r2, [r3, #0]
		bool right = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7); // 8
 800056c:	4b27      	ldr	r3, [pc, #156]	; (800060c <_Z9InputReadPKv+0x108>)
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	0018      	movs	r0, r3
 8000572:	f000 fb49 	bl	8000c08 <HAL_GPIO_ReadPin>
 8000576:	0003      	movs	r3, r0
 8000578:	001a      	movs	r2, r3
 800057a:	2314      	movs	r3, #20
 800057c:	18fb      	adds	r3, r7, r3
 800057e:	1e51      	subs	r1, r2, #1
 8000580:	418a      	sbcs	r2, r1
 8000582:	701a      	strb	r2, [r3, #0]
		bool shoot = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9); // 16
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	009a      	lsls	r2, r3, #2
 8000588:	2390      	movs	r3, #144	; 0x90
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	0011      	movs	r1, r2
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fb3a 	bl	8000c08 <HAL_GPIO_ReadPin>
 8000594:	0003      	movs	r3, r0
 8000596:	001a      	movs	r2, r3
 8000598:	2313      	movs	r3, #19
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	1e51      	subs	r1, r2, #1
 800059e:	418a      	sbcs	r2, r1
 80005a0:	701a      	strb	r2, [r3, #0]


		// converts movement inputs to one number
		uint8_t inputs = (up == 1) << 0 | (down == 1) << 1 | (left == 1) << 2
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	b25a      	sxtb	r2, r3
 80005a8:	197b      	adds	r3, r7, r5
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <_Z9InputReadPKv+0xb0>
 80005b0:	2302      	movs	r3, #2
 80005b2:	e000      	b.n	80005b6 <_Z9InputReadPKv+0xb2>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4313      	orrs	r3, r2
 80005b8:	b25a      	sxtb	r2, r3
 80005ba:	2315      	movs	r3, #21
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <_Z9InputReadPKv+0xc4>
 80005c4:	2304      	movs	r3, #4
 80005c6:	e000      	b.n	80005ca <_Z9InputReadPKv+0xc6>
 80005c8:	2300      	movs	r3, #0
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b25a      	sxtb	r2, r3
				| (right == 1) << 3;
 80005ce:	2314      	movs	r3, #20
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <_Z9InputReadPKv+0xd8>
 80005d8:	2308      	movs	r3, #8
 80005da:	e000      	b.n	80005de <_Z9InputReadPKv+0xda>
 80005dc:	2300      	movs	r3, #0
 80005de:	4313      	orrs	r3, r2
 80005e0:	b25a      	sxtb	r2, r3
		uint8_t inputs = (up == 1) << 0 | (down == 1) << 1 | (left == 1) << 2
 80005e2:	2112      	movs	r1, #18
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	701a      	strb	r2, [r3, #0]

		// up and down is 3

		// left right is 12

		inputmanager.readInput(inputs, shoot);
 80005e8:	2313      	movs	r3, #19
 80005ea:	18fb      	adds	r3, r7, r3
 80005ec:	781a      	ldrb	r2, [r3, #0]
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	7819      	ldrb	r1, [r3, #0]
 80005f2:	2408      	movs	r4, #8
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff fe46 	bl	8000288 <_ZN12InputManager9readInputEhb>
		InputManager inputmanager;
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	0018      	movs	r0, r3
 8000600:	f7ff fe22 	bl	8000248 <_ZN12InputManagerD1Ev>

	}
 8000604:	e782      	b.n	800050c <_Z9InputReadPKv+0x8>
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	48000400 	.word	0x48000400
 800060c:	48000800 	.word	0x48000800

08000610 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>
	...

0800061c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_MspInit+0x50>)
 8000624:	699a      	ldr	r2, [r3, #24]
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <HAL_MspInit+0x50>)
 8000628:	2101      	movs	r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	619a      	str	r2, [r3, #24]
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_MspInit+0x50>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_MspInit+0x50>)
 800063c:	69da      	ldr	r2, [r3, #28]
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <HAL_MspInit+0x50>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	0549      	lsls	r1, r1, #21
 8000644:	430a      	orrs	r2, r1
 8000646:	61da      	str	r2, [r3, #28]
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_MspInit+0x50>)
 800064a:	69da      	ldr	r2, [r3, #28]
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	055b      	lsls	r3, r3, #21
 8000650:	4013      	ands	r3, r2
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000656:	2302      	movs	r3, #2
 8000658:	425b      	negs	r3, r3
 800065a:	2200      	movs	r2, #0
 800065c:	2103      	movs	r1, #3
 800065e:	0018      	movs	r0, r3
 8000660:	f000 f940 	bl	80008e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b002      	add	sp, #8
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <NMI_Handler+0x4>

08000676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <HardFault_Handler+0x4>

0800067c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000680:	f000 f882 	bl	8000788 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000684:	f001 fcd0 	bl	8002028 <xTaskGetSchedulerState>
 8000688:	0003      	movs	r3, r0
 800068a:	2b01      	cmp	r3, #1
 800068c:	d001      	beq.n	8000692 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800068e:	f001 fe33 	bl	80022f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490e      	ldr	r1, [pc, #56]	; (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0b      	ldr	r4, [pc, #44]	; (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006ce:	f7ff ffe3 	bl	8000698 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006d2:	f001 fffb 	bl	80026cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff fe3d 	bl	8000354 <main>

080006da <LoopForever>:

LoopForever:
    b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   r0, =_estack
 80006dc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80006e8:	080029f8 	.word	0x080029f8
  ldr r2, =_sbss
 80006ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80006f0:	20001098 	.word	0x20001098

080006f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_IRQHandler>
	...

080006f8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <HAL_Init+0x24>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_Init+0x24>)
 8000702:	2110      	movs	r1, #16
 8000704:	430a      	orrs	r2, r1
 8000706:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000708:	2003      	movs	r0, #3
 800070a:	f000 f809 	bl	8000720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070e:	f7ff ff85 	bl	800061c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
}
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	40022000 	.word	0x40022000

08000720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_InitTick+0x5c>)
 800072a:	681c      	ldr	r4, [r3, #0]
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <HAL_InitTick+0x60>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	0019      	movs	r1, r3
 8000732:	23fa      	movs	r3, #250	; 0xfa
 8000734:	0098      	lsls	r0, r3, #2
 8000736:	f7ff fce7 	bl	8000108 <__udivsi3>
 800073a:	0003      	movs	r3, r0
 800073c:	0019      	movs	r1, r3
 800073e:	0020      	movs	r0, r4
 8000740:	f7ff fce2 	bl	8000108 <__udivsi3>
 8000744:	0003      	movs	r3, r0
 8000746:	0018      	movs	r0, r3
 8000748:	f000 f8e1 	bl	800090e <HAL_SYSTICK_Config>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000750:	2301      	movs	r3, #1
 8000752:	e00f      	b.n	8000774 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d80b      	bhi.n	8000772 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	2301      	movs	r3, #1
 800075e:	425b      	negs	r3, r3
 8000760:	2200      	movs	r2, #0
 8000762:	0018      	movs	r0, r3
 8000764:	f000 f8be 	bl	80008e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_InitTick+0x64>)
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800076e:	2300      	movs	r3, #0
 8000770:	e000      	b.n	8000774 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
}
 8000774:	0018      	movs	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	b003      	add	sp, #12
 800077a:	bd90      	pop	{r4, r7, pc}
 800077c:	20000000 	.word	0x20000000
 8000780:	20000008 	.word	0x20000008
 8000784:	20000004 	.word	0x20000004

08000788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_IncTick+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	001a      	movs	r2, r3
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_IncTick+0x20>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	18d2      	adds	r2, r2, r3
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_IncTick+0x20>)
 800079a:	601a      	str	r2, [r3, #0]
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20000348 	.word	0x20000348

080007ac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;
 80007b0:	4b02      	ldr	r3, [pc, #8]	; (80007bc <HAL_GetTick+0x10>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	20000348 	.word	0x20000348

080007c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	0002      	movs	r2, r0
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b7f      	cmp	r3, #127	; 0x7f
 80007d4:	d828      	bhi.n	8000828 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d6:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <__NVIC_SetPriority+0xd4>)
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	089b      	lsrs	r3, r3, #2
 80007e0:	33c0      	adds	r3, #192	; 0xc0
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	589b      	ldr	r3, [r3, r2]
 80007e6:	1dfa      	adds	r2, r7, #7
 80007e8:	7812      	ldrb	r2, [r2, #0]
 80007ea:	0011      	movs	r1, r2
 80007ec:	2203      	movs	r2, #3
 80007ee:	400a      	ands	r2, r1
 80007f0:	00d2      	lsls	r2, r2, #3
 80007f2:	21ff      	movs	r1, #255	; 0xff
 80007f4:	4091      	lsls	r1, r2
 80007f6:	000a      	movs	r2, r1
 80007f8:	43d2      	mvns	r2, r2
 80007fa:	401a      	ands	r2, r3
 80007fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	019b      	lsls	r3, r3, #6
 8000802:	22ff      	movs	r2, #255	; 0xff
 8000804:	401a      	ands	r2, r3
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	0018      	movs	r0, r3
 800080c:	2303      	movs	r3, #3
 800080e:	4003      	ands	r3, r0
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000814:	481f      	ldr	r0, [pc, #124]	; (8000894 <__NVIC_SetPriority+0xd4>)
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b25b      	sxtb	r3, r3
 800081c:	089b      	lsrs	r3, r3, #2
 800081e:	430a      	orrs	r2, r1
 8000820:	33c0      	adds	r3, #192	; 0xc0
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000826:	e031      	b.n	800088c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <__NVIC_SetPriority+0xd8>)
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	0019      	movs	r1, r3
 8000830:	230f      	movs	r3, #15
 8000832:	400b      	ands	r3, r1
 8000834:	3b08      	subs	r3, #8
 8000836:	089b      	lsrs	r3, r3, #2
 8000838:	3306      	adds	r3, #6
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	18d3      	adds	r3, r2, r3
 800083e:	3304      	adds	r3, #4
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	1dfa      	adds	r2, r7, #7
 8000844:	7812      	ldrb	r2, [r2, #0]
 8000846:	0011      	movs	r1, r2
 8000848:	2203      	movs	r2, #3
 800084a:	400a      	ands	r2, r1
 800084c:	00d2      	lsls	r2, r2, #3
 800084e:	21ff      	movs	r1, #255	; 0xff
 8000850:	4091      	lsls	r1, r2
 8000852:	000a      	movs	r2, r1
 8000854:	43d2      	mvns	r2, r2
 8000856:	401a      	ands	r2, r3
 8000858:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	019b      	lsls	r3, r3, #6
 800085e:	22ff      	movs	r2, #255	; 0xff
 8000860:	401a      	ands	r2, r3
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	0018      	movs	r0, r3
 8000868:	2303      	movs	r3, #3
 800086a:	4003      	ands	r3, r0
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <__NVIC_SetPriority+0xd8>)
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	001c      	movs	r4, r3
 8000878:	230f      	movs	r3, #15
 800087a:	4023      	ands	r3, r4
 800087c:	3b08      	subs	r3, #8
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	430a      	orrs	r2, r1
 8000882:	3306      	adds	r3, #6
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	18c3      	adds	r3, r0, r3
 8000888:	3304      	adds	r3, #4
 800088a:	601a      	str	r2, [r3, #0]
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b003      	add	sp, #12
 8000892:	bd90      	pop	{r4, r7, pc}
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	1e5a      	subs	r2, r3, #1
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	045b      	lsls	r3, r3, #17
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d301      	bcc.n	80008b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b0:	2301      	movs	r3, #1
 80008b2:	e010      	b.n	80008d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <SysTick_Config+0x44>)
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	3a01      	subs	r2, #1
 80008ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008bc:	2301      	movs	r3, #1
 80008be:	425b      	negs	r3, r3
 80008c0:	2103      	movs	r1, #3
 80008c2:	0018      	movs	r0, r3
 80008c4:	f7ff ff7c 	bl	80007c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <SysTick_Config+0x44>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <SysTick_Config+0x44>)
 80008d0:	2207      	movs	r2, #7
 80008d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	0018      	movs	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	b002      	add	sp, #8
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	e000e010 	.word	0xe000e010

080008e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	210f      	movs	r1, #15
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	1c02      	adds	r2, r0, #0
 80008f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f7ff ff5d 	bl	80007c0 <__NVIC_SetPriority>
}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b004      	add	sp, #16
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	0018      	movs	r0, r3
 800091a:	f7ff ffbf 	bl	800089c <SysTick_Config>
 800091e:	0003      	movs	r3, r0
}
 8000920:	0018      	movs	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	b002      	add	sp, #8
 8000926:	bd80      	pop	{r7, pc}

08000928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000936:	e14f      	b.n	8000bd8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2101      	movs	r1, #1
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	4091      	lsls	r1, r2
 8000942:	000a      	movs	r2, r1
 8000944:	4013      	ands	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d100      	bne.n	8000950 <HAL_GPIO_Init+0x28>
 800094e:	e140      	b.n	8000bd2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2203      	movs	r2, #3
 8000956:	4013      	ands	r3, r2
 8000958:	2b01      	cmp	r3, #1
 800095a:	d005      	beq.n	8000968 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	2203      	movs	r2, #3
 8000962:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000964:	2b02      	cmp	r3, #2
 8000966:	d130      	bne.n	80009ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	2203      	movs	r2, #3
 8000974:	409a      	lsls	r2, r3
 8000976:	0013      	movs	r3, r2
 8000978:	43da      	mvns	r2, r3
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	409a      	lsls	r2, r3
 800098a:	0013      	movs	r3, r2
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4313      	orrs	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800099e:	2201      	movs	r2, #1
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
 80009a4:	0013      	movs	r3, r2
 80009a6:	43da      	mvns	r2, r3
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	091b      	lsrs	r3, r3, #4
 80009b4:	2201      	movs	r2, #1
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	2203      	movs	r2, #3
 80009d0:	4013      	ands	r3, r2
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d017      	beq.n	8000a06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	2203      	movs	r2, #3
 80009e2:	409a      	lsls	r2, r3
 80009e4:	0013      	movs	r3, r2
 80009e6:	43da      	mvns	r2, r3
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	409a      	lsls	r2, r3
 80009f8:	0013      	movs	r3, r2
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d123      	bne.n	8000a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	08da      	lsrs	r2, r3, #3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3208      	adds	r2, #8
 8000a1a:	0092      	lsls	r2, r2, #2
 8000a1c:	58d3      	ldr	r3, [r2, r3]
 8000a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	2207      	movs	r2, #7
 8000a24:	4013      	ands	r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	220f      	movs	r2, #15
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	0013      	movs	r3, r2
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	691a      	ldr	r2, [r3, #16]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	2107      	movs	r1, #7
 8000a3e:	400b      	ands	r3, r1
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	08da      	lsrs	r2, r3, #3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3208      	adds	r2, #8
 8000a54:	0092      	lsls	r2, r2, #2
 8000a56:	6939      	ldr	r1, [r7, #16]
 8000a58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	2203      	movs	r2, #3
 8000a66:	409a      	lsls	r2, r3
 8000a68:	0013      	movs	r3, r2
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	2203      	movs	r2, #3
 8000a78:	401a      	ands	r2, r3
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	23c0      	movs	r3, #192	; 0xc0
 8000a94:	029b      	lsls	r3, r3, #10
 8000a96:	4013      	ands	r3, r2
 8000a98:	d100      	bne.n	8000a9c <HAL_GPIO_Init+0x174>
 8000a9a:	e09a      	b.n	8000bd2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9c:	4b54      	ldr	r3, [pc, #336]	; (8000bf0 <HAL_GPIO_Init+0x2c8>)
 8000a9e:	699a      	ldr	r2, [r3, #24]
 8000aa0:	4b53      	ldr	r3, [pc, #332]	; (8000bf0 <HAL_GPIO_Init+0x2c8>)
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	619a      	str	r2, [r3, #24]
 8000aa8:	4b51      	ldr	r3, [pc, #324]	; (8000bf0 <HAL_GPIO_Init+0x2c8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	2201      	movs	r2, #1
 8000aae:	4013      	ands	r3, r2
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ab4:	4a4f      	ldr	r2, [pc, #316]	; (8000bf4 <HAL_GPIO_Init+0x2cc>)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	589b      	ldr	r3, [r3, r2]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	220f      	movs	r2, #15
 8000acc:	409a      	lsls	r2, r3
 8000ace:	0013      	movs	r3, r2
 8000ad0:	43da      	mvns	r2, r3
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	2390      	movs	r3, #144	; 0x90
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d013      	beq.n	8000b0a <HAL_GPIO_Init+0x1e2>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a44      	ldr	r2, [pc, #272]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d00d      	beq.n	8000b06 <HAL_GPIO_Init+0x1de>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a43      	ldr	r2, [pc, #268]	; (8000bfc <HAL_GPIO_Init+0x2d4>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d007      	beq.n	8000b02 <HAL_GPIO_Init+0x1da>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a42      	ldr	r2, [pc, #264]	; (8000c00 <HAL_GPIO_Init+0x2d8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d101      	bne.n	8000afe <HAL_GPIO_Init+0x1d6>
 8000afa:	2303      	movs	r3, #3
 8000afc:	e006      	b.n	8000b0c <HAL_GPIO_Init+0x1e4>
 8000afe:	2305      	movs	r3, #5
 8000b00:	e004      	b.n	8000b0c <HAL_GPIO_Init+0x1e4>
 8000b02:	2302      	movs	r3, #2
 8000b04:	e002      	b.n	8000b0c <HAL_GPIO_Init+0x1e4>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e000      	b.n	8000b0c <HAL_GPIO_Init+0x1e4>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	2103      	movs	r1, #3
 8000b10:	400a      	ands	r2, r1
 8000b12:	0092      	lsls	r2, r2, #2
 8000b14:	4093      	lsls	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b1c:	4935      	ldr	r1, [pc, #212]	; (8000bf4 <HAL_GPIO_Init+0x2cc>)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	3302      	adds	r3, #2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b2a:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <HAL_GPIO_Init+0x2dc>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	43da      	mvns	r2, r3
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	025b      	lsls	r3, r3, #9
 8000b42:	4013      	ands	r3, r2
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b4e:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <HAL_GPIO_Init+0x2dc>)
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b54:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <HAL_GPIO_Init+0x2dc>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	43da      	mvns	r2, r3
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	029b      	lsls	r3, r3, #10
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <HAL_GPIO_Init+0x2dc>)
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <HAL_GPIO_Init+0x2dc>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	43da      	mvns	r2, r3
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	035b      	lsls	r3, r3, #13
 8000b96:	4013      	ands	r3, r2
 8000b98:	d003      	beq.n	8000ba2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <HAL_GPIO_Init+0x2dc>)
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_GPIO_Init+0x2dc>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	43da      	mvns	r2, r3
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	039b      	lsls	r3, r3, #14
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	d003      	beq.n	8000bcc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_GPIO_Init+0x2dc>)
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	40da      	lsrs	r2, r3
 8000be0:	1e13      	subs	r3, r2, #0
 8000be2:	d000      	beq.n	8000be6 <HAL_GPIO_Init+0x2be>
 8000be4:	e6a8      	b.n	8000938 <HAL_GPIO_Init+0x10>
  } 
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b006      	add	sp, #24
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010000 	.word	0x40010000
 8000bf8:	48000400 	.word	0x48000400
 8000bfc:	48000800 	.word	0x48000800
 8000c00:	48000c00 	.word	0x48000c00
 8000c04:	40010400 	.word	0x40010400

08000c08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	000a      	movs	r2, r1
 8000c12:	1cbb      	adds	r3, r7, #2
 8000c14:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	1cba      	adds	r2, r7, #2
 8000c1c:	8812      	ldrh	r2, [r2, #0]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	d004      	beq.n	8000c2c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000c22:	230f      	movs	r3, #15
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e003      	b.n	8000c34 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	781b      	ldrb	r3, [r3, #0]
  }
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b004      	add	sp, #16
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e301      	b.n	800125a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	d100      	bne.n	8000c62 <HAL_RCC_OscConfig+0x1e>
 8000c60:	e08d      	b.n	8000d7e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c62:	4bc3      	ldr	r3, [pc, #780]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	220c      	movs	r2, #12
 8000c68:	4013      	ands	r3, r2
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d00e      	beq.n	8000c8c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c6e:	4bc0      	ldr	r3, [pc, #768]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	220c      	movs	r2, #12
 8000c74:	4013      	ands	r3, r2
 8000c76:	2b08      	cmp	r3, #8
 8000c78:	d116      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x64>
 8000c7a:	4bbd      	ldr	r3, [pc, #756]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	025b      	lsls	r3, r3, #9
 8000c82:	401a      	ands	r2, r3
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	025b      	lsls	r3, r3, #9
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d10d      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8c:	4bb8      	ldr	r3, [pc, #736]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	029b      	lsls	r3, r3, #10
 8000c94:	4013      	ands	r3, r2
 8000c96:	d100      	bne.n	8000c9a <HAL_RCC_OscConfig+0x56>
 8000c98:	e070      	b.n	8000d7c <HAL_RCC_OscConfig+0x138>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d000      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x60>
 8000ca2:	e06b      	b.n	8000d7c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e2d8      	b.n	800125a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d107      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x7c>
 8000cb0:	4baf      	ldr	r3, [pc, #700]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4bae      	ldr	r3, [pc, #696]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	0249      	lsls	r1, r1, #9
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e02f      	b.n	8000d20 <HAL_RCC_OscConfig+0xdc>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d10c      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x9e>
 8000cc8:	4ba9      	ldr	r3, [pc, #676]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4ba8      	ldr	r3, [pc, #672]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000cce:	49a9      	ldr	r1, [pc, #676]	; (8000f74 <HAL_RCC_OscConfig+0x330>)
 8000cd0:	400a      	ands	r2, r1
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	4ba6      	ldr	r3, [pc, #664]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4ba5      	ldr	r3, [pc, #660]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000cda:	49a7      	ldr	r1, [pc, #668]	; (8000f78 <HAL_RCC_OscConfig+0x334>)
 8000cdc:	400a      	ands	r2, r1
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	e01e      	b.n	8000d20 <HAL_RCC_OscConfig+0xdc>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d10e      	bne.n	8000d08 <HAL_RCC_OscConfig+0xc4>
 8000cea:	4ba1      	ldr	r3, [pc, #644]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4ba0      	ldr	r3, [pc, #640]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	02c9      	lsls	r1, r1, #11
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	4b9d      	ldr	r3, [pc, #628]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b9c      	ldr	r3, [pc, #624]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000cfe:	2180      	movs	r1, #128	; 0x80
 8000d00:	0249      	lsls	r1, r1, #9
 8000d02:	430a      	orrs	r2, r1
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e00b      	b.n	8000d20 <HAL_RCC_OscConfig+0xdc>
 8000d08:	4b99      	ldr	r3, [pc, #612]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b98      	ldr	r3, [pc, #608]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000d0e:	4999      	ldr	r1, [pc, #612]	; (8000f74 <HAL_RCC_OscConfig+0x330>)
 8000d10:	400a      	ands	r2, r1
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	4b96      	ldr	r3, [pc, #600]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b95      	ldr	r3, [pc, #596]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000d1a:	4997      	ldr	r1, [pc, #604]	; (8000f78 <HAL_RCC_OscConfig+0x334>)
 8000d1c:	400a      	ands	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d014      	beq.n	8000d52 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d28:	f7ff fd40 	bl	80007ac <HAL_GetTick>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d32:	f7ff fd3b 	bl	80007ac <HAL_GetTick>
 8000d36:	0002      	movs	r2, r0
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b64      	cmp	r3, #100	; 0x64
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e28a      	b.n	800125a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d44:	4b8a      	ldr	r3, [pc, #552]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	029b      	lsls	r3, r3, #10
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d0f0      	beq.n	8000d32 <HAL_RCC_OscConfig+0xee>
 8000d50:	e015      	b.n	8000d7e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d52:	f7ff fd2b 	bl	80007ac <HAL_GetTick>
 8000d56:	0003      	movs	r3, r0
 8000d58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d5c:	f7ff fd26 	bl	80007ac <HAL_GetTick>
 8000d60:	0002      	movs	r2, r0
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b64      	cmp	r3, #100	; 0x64
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e275      	b.n	800125a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6e:	4b80      	ldr	r3, [pc, #512]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	029b      	lsls	r3, r3, #10
 8000d76:	4013      	ands	r3, r2
 8000d78:	d1f0      	bne.n	8000d5c <HAL_RCC_OscConfig+0x118>
 8000d7a:	e000      	b.n	8000d7e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2202      	movs	r2, #2
 8000d84:	4013      	ands	r3, r2
 8000d86:	d100      	bne.n	8000d8a <HAL_RCC_OscConfig+0x146>
 8000d88:	e069      	b.n	8000e5e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d8a:	4b79      	ldr	r3, [pc, #484]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	220c      	movs	r2, #12
 8000d90:	4013      	ands	r3, r2
 8000d92:	d00b      	beq.n	8000dac <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d94:	4b76      	ldr	r3, [pc, #472]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	220c      	movs	r2, #12
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b08      	cmp	r3, #8
 8000d9e:	d11c      	bne.n	8000dda <HAL_RCC_OscConfig+0x196>
 8000da0:	4b73      	ldr	r3, [pc, #460]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	025b      	lsls	r3, r3, #9
 8000da8:	4013      	ands	r3, r2
 8000daa:	d116      	bne.n	8000dda <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dac:	4b70      	ldr	r3, [pc, #448]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2202      	movs	r2, #2
 8000db2:	4013      	ands	r3, r2
 8000db4:	d005      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x17e>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d001      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e24b      	b.n	800125a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc2:	4b6b      	ldr	r3, [pc, #428]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	22f8      	movs	r2, #248	; 0xf8
 8000dc8:	4393      	bics	r3, r2
 8000dca:	0019      	movs	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	00da      	lsls	r2, r3, #3
 8000dd2:	4b67      	ldr	r3, [pc, #412]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd8:	e041      	b.n	8000e5e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d024      	beq.n	8000e2c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000de2:	4b63      	ldr	r3, [pc, #396]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4b62      	ldr	r3, [pc, #392]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000de8:	2101      	movs	r1, #1
 8000dea:	430a      	orrs	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dee:	f7ff fcdd 	bl	80007ac <HAL_GetTick>
 8000df2:	0003      	movs	r3, r0
 8000df4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000df8:	f7ff fcd8 	bl	80007ac <HAL_GetTick>
 8000dfc:	0002      	movs	r2, r0
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e227      	b.n	800125a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0a:	4b59      	ldr	r3, [pc, #356]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2202      	movs	r2, #2
 8000e10:	4013      	ands	r3, r2
 8000e12:	d0f1      	beq.n	8000df8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e14:	4b56      	ldr	r3, [pc, #344]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	22f8      	movs	r2, #248	; 0xf8
 8000e1a:	4393      	bics	r3, r2
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	00da      	lsls	r2, r3, #3
 8000e24:	4b52      	ldr	r3, [pc, #328]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000e26:	430a      	orrs	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	e018      	b.n	8000e5e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e2c:	4b50      	ldr	r3, [pc, #320]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b4f      	ldr	r3, [pc, #316]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000e32:	2101      	movs	r1, #1
 8000e34:	438a      	bics	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e38:	f7ff fcb8 	bl	80007ac <HAL_GetTick>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e40:	e008      	b.n	8000e54 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e42:	f7ff fcb3 	bl	80007ac <HAL_GetTick>
 8000e46:	0002      	movs	r2, r0
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e202      	b.n	800125a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e54:	4b46      	ldr	r3, [pc, #280]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2202      	movs	r2, #2
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d1f1      	bne.n	8000e42 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2208      	movs	r2, #8
 8000e64:	4013      	ands	r3, r2
 8000e66:	d036      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d019      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e70:	4b3f      	ldr	r3, [pc, #252]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e74:	4b3e      	ldr	r3, [pc, #248]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fc96 	bl	80007ac <HAL_GetTick>
 8000e80:	0003      	movs	r3, r0
 8000e82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e84:	e008      	b.n	8000e98 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e86:	f7ff fc91 	bl	80007ac <HAL_GetTick>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e1e0      	b.n	800125a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e98:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d0f1      	beq.n	8000e86 <HAL_RCC_OscConfig+0x242>
 8000ea2:	e018      	b.n	8000ed6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ea4:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ea8:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000eaa:	2101      	movs	r1, #1
 8000eac:	438a      	bics	r2, r1
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fc7c 	bl	80007ac <HAL_GetTick>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eba:	f7ff fc77 	bl	80007ac <HAL_GetTick>
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e1c6      	b.n	800125a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ecc:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d1f1      	bne.n	8000eba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2204      	movs	r2, #4
 8000edc:	4013      	ands	r3, r2
 8000ede:	d100      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x29e>
 8000ee0:	e0b4      	b.n	800104c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ee2:	201f      	movs	r0, #31
 8000ee4:	183b      	adds	r3, r7, r0
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000eec:	69da      	ldr	r2, [r3, #28]
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	055b      	lsls	r3, r3, #21
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d110      	bne.n	8000f18 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000ef8:	69da      	ldr	r2, [r3, #28]
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	0549      	lsls	r1, r1, #21
 8000f00:	430a      	orrs	r2, r1
 8000f02:	61da      	str	r2, [r3, #28]
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000f06:	69da      	ldr	r2, [r3, #28]
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	055b      	lsls	r3, r3, #21
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f12:	183b      	adds	r3, r7, r0
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_RCC_OscConfig+0x338>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4013      	ands	r3, r2
 8000f22:	d11a      	bne.n	8000f5a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_RCC_OscConfig+0x338>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_RCC_OscConfig+0x338>)
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	0049      	lsls	r1, r1, #1
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f32:	f7ff fc3b 	bl	80007ac <HAL_GetTick>
 8000f36:	0003      	movs	r3, r0
 8000f38:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f3c:	f7ff fc36 	bl	80007ac <HAL_GetTick>
 8000f40:	0002      	movs	r2, r0
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b64      	cmp	r3, #100	; 0x64
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e185      	b.n	800125a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_RCC_OscConfig+0x338>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4013      	ands	r3, r2
 8000f58:	d0f0      	beq.n	8000f3c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d10e      	bne.n	8000f80 <HAL_RCC_OscConfig+0x33c>
 8000f62:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000f64:	6a1a      	ldr	r2, [r3, #32]
 8000f66:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <HAL_RCC_OscConfig+0x32c>)
 8000f68:	2101      	movs	r1, #1
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	621a      	str	r2, [r3, #32]
 8000f6e:	e035      	b.n	8000fdc <HAL_RCC_OscConfig+0x398>
 8000f70:	40021000 	.word	0x40021000
 8000f74:	fffeffff 	.word	0xfffeffff
 8000f78:	fffbffff 	.word	0xfffbffff
 8000f7c:	40007000 	.word	0x40007000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10c      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x35e>
 8000f88:	4bb6      	ldr	r3, [pc, #728]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8000f8a:	6a1a      	ldr	r2, [r3, #32]
 8000f8c:	4bb5      	ldr	r3, [pc, #724]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8000f8e:	2101      	movs	r1, #1
 8000f90:	438a      	bics	r2, r1
 8000f92:	621a      	str	r2, [r3, #32]
 8000f94:	4bb3      	ldr	r3, [pc, #716]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8000f96:	6a1a      	ldr	r2, [r3, #32]
 8000f98:	4bb2      	ldr	r3, [pc, #712]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	438a      	bics	r2, r1
 8000f9e:	621a      	str	r2, [r3, #32]
 8000fa0:	e01c      	b.n	8000fdc <HAL_RCC_OscConfig+0x398>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	2b05      	cmp	r3, #5
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x380>
 8000faa:	4bae      	ldr	r3, [pc, #696]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8000fac:	6a1a      	ldr	r2, [r3, #32]
 8000fae:	4bad      	ldr	r3, [pc, #692]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	621a      	str	r2, [r3, #32]
 8000fb6:	4bab      	ldr	r3, [pc, #684]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8000fb8:	6a1a      	ldr	r2, [r3, #32]
 8000fba:	4baa      	ldr	r3, [pc, #680]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	621a      	str	r2, [r3, #32]
 8000fc2:	e00b      	b.n	8000fdc <HAL_RCC_OscConfig+0x398>
 8000fc4:	4ba7      	ldr	r3, [pc, #668]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8000fc6:	6a1a      	ldr	r2, [r3, #32]
 8000fc8:	4ba6      	ldr	r3, [pc, #664]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8000fca:	2101      	movs	r1, #1
 8000fcc:	438a      	bics	r2, r1
 8000fce:	621a      	str	r2, [r3, #32]
 8000fd0:	4ba4      	ldr	r3, [pc, #656]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8000fd2:	6a1a      	ldr	r2, [r3, #32]
 8000fd4:	4ba3      	ldr	r3, [pc, #652]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	438a      	bics	r2, r1
 8000fda:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d014      	beq.n	800100e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe4:	f7ff fbe2 	bl	80007ac <HAL_GetTick>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fec:	e009      	b.n	8001002 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fee:	f7ff fbdd 	bl	80007ac <HAL_GetTick>
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	4a9b      	ldr	r2, [pc, #620]	; (8001268 <HAL_RCC_OscConfig+0x624>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e12b      	b.n	800125a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001002:	4b98      	ldr	r3, [pc, #608]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	2202      	movs	r2, #2
 8001008:	4013      	ands	r3, r2
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0x3aa>
 800100c:	e013      	b.n	8001036 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100e:	f7ff fbcd 	bl	80007ac <HAL_GetTick>
 8001012:	0003      	movs	r3, r0
 8001014:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001016:	e009      	b.n	800102c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001018:	f7ff fbc8 	bl	80007ac <HAL_GetTick>
 800101c:	0002      	movs	r2, r0
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	4a91      	ldr	r2, [pc, #580]	; (8001268 <HAL_RCC_OscConfig+0x624>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e116      	b.n	800125a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800102c:	4b8d      	ldr	r3, [pc, #564]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	2202      	movs	r2, #2
 8001032:	4013      	ands	r3, r2
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001036:	231f      	movs	r3, #31
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d105      	bne.n	800104c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001040:	4b88      	ldr	r3, [pc, #544]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001042:	69da      	ldr	r2, [r3, #28]
 8001044:	4b87      	ldr	r3, [pc, #540]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001046:	4989      	ldr	r1, [pc, #548]	; (800126c <HAL_RCC_OscConfig+0x628>)
 8001048:	400a      	ands	r2, r1
 800104a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2210      	movs	r2, #16
 8001052:	4013      	ands	r3, r2
 8001054:	d063      	beq.n	800111e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d12a      	bne.n	80010b4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800105e:	4b81      	ldr	r3, [pc, #516]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001062:	4b80      	ldr	r3, [pc, #512]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001064:	2104      	movs	r1, #4
 8001066:	430a      	orrs	r2, r1
 8001068:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800106a:	4b7e      	ldr	r3, [pc, #504]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 800106c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800106e:	4b7d      	ldr	r3, [pc, #500]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001070:	2101      	movs	r1, #1
 8001072:	430a      	orrs	r2, r1
 8001074:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fb99 	bl	80007ac <HAL_GetTick>
 800107a:	0003      	movs	r3, r0
 800107c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001080:	f7ff fb94 	bl	80007ac <HAL_GetTick>
 8001084:	0002      	movs	r2, r0
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e0e3      	b.n	800125a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001092:	4b74      	ldr	r3, [pc, #464]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001096:	2202      	movs	r2, #2
 8001098:	4013      	ands	r3, r2
 800109a:	d0f1      	beq.n	8001080 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800109c:	4b71      	ldr	r3, [pc, #452]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 800109e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a0:	22f8      	movs	r2, #248	; 0xf8
 80010a2:	4393      	bics	r3, r2
 80010a4:	0019      	movs	r1, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	00da      	lsls	r2, r3, #3
 80010ac:	4b6d      	ldr	r3, [pc, #436]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 80010ae:	430a      	orrs	r2, r1
 80010b0:	635a      	str	r2, [r3, #52]	; 0x34
 80010b2:	e034      	b.n	800111e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	3305      	adds	r3, #5
 80010ba:	d111      	bne.n	80010e0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010bc:	4b69      	ldr	r3, [pc, #420]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 80010be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c0:	4b68      	ldr	r3, [pc, #416]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 80010c2:	2104      	movs	r1, #4
 80010c4:	438a      	bics	r2, r1
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010c8:	4b66      	ldr	r3, [pc, #408]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 80010ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010cc:	22f8      	movs	r2, #248	; 0xf8
 80010ce:	4393      	bics	r3, r2
 80010d0:	0019      	movs	r1, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	00da      	lsls	r2, r3, #3
 80010d8:	4b62      	ldr	r3, [pc, #392]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 80010da:	430a      	orrs	r2, r1
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34
 80010de:	e01e      	b.n	800111e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010e0:	4b60      	ldr	r3, [pc, #384]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 80010e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e4:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 80010e6:	2104      	movs	r1, #4
 80010e8:	430a      	orrs	r2, r1
 80010ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010ec:	4b5d      	ldr	r3, [pc, #372]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 80010ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010f0:	4b5c      	ldr	r3, [pc, #368]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 80010f2:	2101      	movs	r1, #1
 80010f4:	438a      	bics	r2, r1
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f8:	f7ff fb58 	bl	80007ac <HAL_GetTick>
 80010fc:	0003      	movs	r3, r0
 80010fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001102:	f7ff fb53 	bl	80007ac <HAL_GetTick>
 8001106:	0002      	movs	r2, r0
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e0a2      	b.n	800125a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001118:	2202      	movs	r2, #2
 800111a:	4013      	ands	r3, r2
 800111c:	d1f1      	bne.n	8001102 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d100      	bne.n	8001128 <HAL_RCC_OscConfig+0x4e4>
 8001126:	e097      	b.n	8001258 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001128:	4b4e      	ldr	r3, [pc, #312]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	220c      	movs	r2, #12
 800112e:	4013      	ands	r3, r2
 8001130:	2b08      	cmp	r3, #8
 8001132:	d100      	bne.n	8001136 <HAL_RCC_OscConfig+0x4f2>
 8001134:	e06b      	b.n	800120e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d14c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113e:	4b49      	ldr	r3, [pc, #292]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b48      	ldr	r3, [pc, #288]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001144:	494a      	ldr	r1, [pc, #296]	; (8001270 <HAL_RCC_OscConfig+0x62c>)
 8001146:	400a      	ands	r2, r1
 8001148:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fb2f 	bl	80007ac <HAL_GetTick>
 800114e:	0003      	movs	r3, r0
 8001150:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001154:	f7ff fb2a 	bl	80007ac <HAL_GetTick>
 8001158:	0002      	movs	r2, r0
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e079      	b.n	800125a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001166:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	049b      	lsls	r3, r3, #18
 800116e:	4013      	ands	r3, r2
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001172:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001176:	220f      	movs	r2, #15
 8001178:	4393      	bics	r3, r2
 800117a:	0019      	movs	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001180:	4b38      	ldr	r3, [pc, #224]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001182:	430a      	orrs	r2, r1
 8001184:	62da      	str	r2, [r3, #44]	; 0x2c
 8001186:	4b37      	ldr	r3, [pc, #220]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	4a3a      	ldr	r2, [pc, #232]	; (8001274 <HAL_RCC_OscConfig+0x630>)
 800118c:	4013      	ands	r3, r2
 800118e:	0019      	movs	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	431a      	orrs	r2, r3
 800119a:	4b32      	ldr	r3, [pc, #200]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 800119c:	430a      	orrs	r2, r1
 800119e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	0449      	lsls	r1, r1, #17
 80011aa:	430a      	orrs	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fafd 	bl	80007ac <HAL_GetTick>
 80011b2:	0003      	movs	r3, r0
 80011b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011b8:	f7ff faf8 	bl	80007ac <HAL_GetTick>
 80011bc:	0002      	movs	r2, r0
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e047      	b.n	800125a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	049b      	lsls	r3, r3, #18
 80011d2:	4013      	ands	r3, r2
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0x574>
 80011d6:	e03f      	b.n	8001258 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 80011de:	4924      	ldr	r1, [pc, #144]	; (8001270 <HAL_RCC_OscConfig+0x62c>)
 80011e0:	400a      	ands	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fae2 	bl	80007ac <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ee:	f7ff fadd 	bl	80007ac <HAL_GetTick>
 80011f2:	0002      	movs	r2, r0
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e02c      	b.n	800125a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	049b      	lsls	r3, r3, #18
 8001208:	4013      	ands	r3, r2
 800120a:	d1f0      	bne.n	80011ee <HAL_RCC_OscConfig+0x5aa>
 800120c:	e024      	b.n	8001258 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e01f      	b.n	800125a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_RCC_OscConfig+0x620>)
 8001222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001224:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	025b      	lsls	r3, r3, #9
 800122c:	401a      	ands	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001232:	429a      	cmp	r2, r3
 8001234:	d10e      	bne.n	8001254 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	220f      	movs	r2, #15
 800123a:	401a      	ands	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001240:	429a      	cmp	r2, r3
 8001242:	d107      	bne.n	8001254 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	23f0      	movs	r3, #240	; 0xf0
 8001248:	039b      	lsls	r3, r3, #14
 800124a:	401a      	ands	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001250:	429a      	cmp	r2, r3
 8001252:	d001      	beq.n	8001258 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	0018      	movs	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	b008      	add	sp, #32
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	40021000 	.word	0x40021000
 8001268:	00001388 	.word	0x00001388
 800126c:	efffffff 	.word	0xefffffff
 8001270:	feffffff 	.word	0xfeffffff
 8001274:	ffc2ffff 	.word	0xffc2ffff

08001278 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e0b3      	b.n	80013f4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800128c:	4b5b      	ldr	r3, [pc, #364]	; (80013fc <HAL_RCC_ClockConfig+0x184>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	4013      	ands	r3, r2
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d911      	bls.n	80012be <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129a:	4b58      	ldr	r3, [pc, #352]	; (80013fc <HAL_RCC_ClockConfig+0x184>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2201      	movs	r2, #1
 80012a0:	4393      	bics	r3, r2
 80012a2:	0019      	movs	r1, r3
 80012a4:	4b55      	ldr	r3, [pc, #340]	; (80013fc <HAL_RCC_ClockConfig+0x184>)
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ac:	4b53      	ldr	r3, [pc, #332]	; (80013fc <HAL_RCC_ClockConfig+0x184>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2201      	movs	r2, #1
 80012b2:	4013      	ands	r3, r2
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d001      	beq.n	80012be <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e09a      	b.n	80013f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2202      	movs	r2, #2
 80012c4:	4013      	ands	r3, r2
 80012c6:	d015      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2204      	movs	r2, #4
 80012ce:	4013      	ands	r3, r2
 80012d0:	d006      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012d2:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <HAL_RCC_ClockConfig+0x188>)
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <HAL_RCC_ClockConfig+0x188>)
 80012d8:	21e0      	movs	r1, #224	; 0xe0
 80012da:	00c9      	lsls	r1, r1, #3
 80012dc:	430a      	orrs	r2, r1
 80012de:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e0:	4b47      	ldr	r3, [pc, #284]	; (8001400 <HAL_RCC_ClockConfig+0x188>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	22f0      	movs	r2, #240	; 0xf0
 80012e6:	4393      	bics	r3, r2
 80012e8:	0019      	movs	r1, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	4b44      	ldr	r3, [pc, #272]	; (8001400 <HAL_RCC_ClockConfig+0x188>)
 80012f0:	430a      	orrs	r2, r1
 80012f2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2201      	movs	r2, #1
 80012fa:	4013      	ands	r3, r2
 80012fc:	d040      	beq.n	8001380 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d107      	bne.n	8001316 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b3e      	ldr	r3, [pc, #248]	; (8001400 <HAL_RCC_ClockConfig+0x188>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	029b      	lsls	r3, r3, #10
 800130e:	4013      	ands	r3, r2
 8001310:	d114      	bne.n	800133c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e06e      	b.n	80013f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d107      	bne.n	800132e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131e:	4b38      	ldr	r3, [pc, #224]	; (8001400 <HAL_RCC_ClockConfig+0x188>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	049b      	lsls	r3, r3, #18
 8001326:	4013      	ands	r3, r2
 8001328:	d108      	bne.n	800133c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e062      	b.n	80013f4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132e:	4b34      	ldr	r3, [pc, #208]	; (8001400 <HAL_RCC_ClockConfig+0x188>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2202      	movs	r2, #2
 8001334:	4013      	ands	r3, r2
 8001336:	d101      	bne.n	800133c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e05b      	b.n	80013f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133c:	4b30      	ldr	r3, [pc, #192]	; (8001400 <HAL_RCC_ClockConfig+0x188>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2203      	movs	r2, #3
 8001342:	4393      	bics	r3, r2
 8001344:	0019      	movs	r1, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <HAL_RCC_ClockConfig+0x188>)
 800134c:	430a      	orrs	r2, r1
 800134e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001350:	f7ff fa2c 	bl	80007ac <HAL_GetTick>
 8001354:	0003      	movs	r3, r0
 8001356:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001358:	e009      	b.n	800136e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135a:	f7ff fa27 	bl	80007ac <HAL_GetTick>
 800135e:	0002      	movs	r2, r0
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <HAL_RCC_ClockConfig+0x18c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d901      	bls.n	800136e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e042      	b.n	80013f4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_RCC_ClockConfig+0x188>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	220c      	movs	r2, #12
 8001374:	401a      	ands	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	429a      	cmp	r2, r3
 800137e:	d1ec      	bne.n	800135a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <HAL_RCC_ClockConfig+0x184>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d211      	bcs.n	80013b2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_RCC_ClockConfig+0x184>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	4393      	bics	r3, r2
 8001396:	0019      	movs	r1, r3
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_RCC_ClockConfig+0x184>)
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_RCC_ClockConfig+0x184>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2201      	movs	r2, #1
 80013a6:	4013      	ands	r3, r2
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e020      	b.n	80013f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2204      	movs	r2, #4
 80013b8:	4013      	ands	r3, r2
 80013ba:	d009      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_RCC_ClockConfig+0x188>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <HAL_RCC_ClockConfig+0x190>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	0019      	movs	r1, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_RCC_ClockConfig+0x188>)
 80013cc:	430a      	orrs	r2, r1
 80013ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013d0:	f000 f820 	bl	8001414 <HAL_RCC_GetSysClockFreq>
 80013d4:	0001      	movs	r1, r0
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_RCC_ClockConfig+0x188>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	220f      	movs	r2, #15
 80013de:	4013      	ands	r3, r2
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_RCC_ClockConfig+0x194>)
 80013e2:	5cd3      	ldrb	r3, [r2, r3]
 80013e4:	000a      	movs	r2, r1
 80013e6:	40da      	lsrs	r2, r3
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_RCC_ClockConfig+0x198>)
 80013ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f7ff f997 	bl	8000720 <HAL_InitTick>
  
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b004      	add	sp, #16
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40022000 	.word	0x40022000
 8001400:	40021000 	.word	0x40021000
 8001404:	00001388 	.word	0x00001388
 8001408:	fffff8ff 	.word	0xfffff8ff
 800140c:	08002980 	.word	0x08002980
 8001410:	20000000 	.word	0x20000000

08001414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b08f      	sub	sp, #60	; 0x3c
 8001418:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800141a:	2314      	movs	r3, #20
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	4a2b      	ldr	r2, [pc, #172]	; (80014cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001420:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001422:	c313      	stmia	r3!, {r0, r1, r4}
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4a29      	ldr	r2, [pc, #164]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800142c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800142e:	c313      	stmia	r3!, {r0, r1, r4}
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
 800143c:	2300      	movs	r3, #0
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800144e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001450:	220c      	movs	r2, #12
 8001452:	4013      	ands	r3, r2
 8001454:	2b04      	cmp	r3, #4
 8001456:	d002      	beq.n	800145e <HAL_RCC_GetSysClockFreq+0x4a>
 8001458:	2b08      	cmp	r3, #8
 800145a:	d003      	beq.n	8001464 <HAL_RCC_GetSysClockFreq+0x50>
 800145c:	e02d      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001460:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001462:	e02d      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001466:	0c9b      	lsrs	r3, r3, #18
 8001468:	220f      	movs	r2, #15
 800146a:	4013      	ands	r3, r2
 800146c:	2214      	movs	r2, #20
 800146e:	18ba      	adds	r2, r7, r2
 8001470:	5cd3      	ldrb	r3, [r2, r3]
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	220f      	movs	r2, #15
 800147a:	4013      	ands	r3, r2
 800147c:	1d3a      	adds	r2, r7, #4
 800147e:	5cd3      	ldrb	r3, [r2, r3]
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	4013      	ands	r3, r2
 800148a:	d009      	beq.n	80014a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800148c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800148e:	4812      	ldr	r0, [pc, #72]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001490:	f7fe fe3a 	bl	8000108 <__udivsi3>
 8001494:	0003      	movs	r3, r0
 8001496:	001a      	movs	r2, r3
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	4353      	muls	r3, r2
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
 800149e:	e009      	b.n	80014b4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80014a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a2:	000a      	movs	r2, r1
 80014a4:	0152      	lsls	r2, r2, #5
 80014a6:	1a52      	subs	r2, r2, r1
 80014a8:	0193      	lsls	r3, r2, #6
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	185b      	adds	r3, r3, r1
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80014b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014b8:	e002      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80014c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014c2:	0018      	movs	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b00f      	add	sp, #60	; 0x3c
 80014c8:	bd90      	pop	{r4, r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	0800291c 	.word	0x0800291c
 80014d0:	0800292c 	.word	0x0800292c
 80014d4:	40021000 	.word	0x40021000
 80014d8:	007a1200 	.word	0x007a1200

080014dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	0002      	movs	r2, r0
 80014e4:	1dbb      	adds	r3, r7, #6
 80014e6:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80014ec:	1dbb      	adds	r3, r7, #6
 80014ee:	2200      	movs	r2, #0
 80014f0:	5e9b      	ldrsh	r3, [r3, r2]
 80014f2:	2b84      	cmp	r3, #132	; 0x84
 80014f4:	d006      	beq.n	8001504 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80014f6:	1dbb      	adds	r3, r7, #6
 80014f8:	2200      	movs	r2, #0
 80014fa:	5e9a      	ldrsh	r2, [r3, r2]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	18d3      	adds	r3, r2, r3
 8001500:	3303      	adds	r3, #3
 8001502:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001504:	68fb      	ldr	r3, [r7, #12]
}
 8001506:	0018      	movs	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	b004      	add	sp, #16
 800150c:	bd80      	pop	{r7, pc}

0800150e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001512:	f000 fab7 	bl	8001a84 <vTaskStartScheduler>
  
  return osOK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800151e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001520:	b089      	sub	sp, #36	; 0x24
 8001522:	af04      	add	r7, sp, #16
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <osThreadCreate+0x54>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01c      	beq.n	8001572 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685c      	ldr	r4, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681d      	ldr	r5, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691e      	ldr	r6, [r3, #16]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2208      	movs	r2, #8
 8001548:	5e9b      	ldrsh	r3, [r3, r2]
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff ffc6 	bl	80014dc <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	9302      	str	r3, [sp, #8]
 800155c:	9201      	str	r2, [sp, #4]
 800155e:	9000      	str	r0, [sp, #0]
 8001560:	000b      	movs	r3, r1
 8001562:	0032      	movs	r2, r6
 8001564:	0029      	movs	r1, r5
 8001566:	0020      	movs	r0, r4
 8001568:	f000 f8e3 	bl	8001732 <xTaskCreateStatic>
 800156c:	0003      	movs	r3, r0
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	e01d      	b.n	80015ae <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685c      	ldr	r4, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800157e:	b29e      	uxth	r6, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2208      	movs	r2, #8
 8001584:	5e9b      	ldrsh	r3, [r3, r2]
 8001586:	0018      	movs	r0, r3
 8001588:	f7ff ffa8 	bl	80014dc <makeFreeRtosPriority>
 800158c:	0001      	movs	r1, r0
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	230c      	movs	r3, #12
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	9100      	str	r1, [sp, #0]
 8001598:	0013      	movs	r3, r2
 800159a:	0032      	movs	r2, r6
 800159c:	0029      	movs	r1, r5
 800159e:	0020      	movs	r0, r4
 80015a0:	f000 f90a 	bl	80017b8 <xTaskCreate>
 80015a4:	0003      	movs	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d001      	beq.n	80015ae <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b005      	add	sp, #20
 80015b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015b8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <osDelay+0x16>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	e000      	b.n	80015d0 <osDelay+0x18>
 80015ce:	2301      	movs	r3, #1
 80015d0:	0018      	movs	r0, r3
 80015d2:	f000 fa31 	bl	8001a38 <vTaskDelay>
  
  return osOK;
 80015d6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	b004      	add	sp, #16
 80015de:	bd80      	pop	{r7, pc}

080015e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3308      	adds	r3, #8
 80015ec:	001a      	movs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	4252      	negs	r2, r2
 80015f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3308      	adds	r3, #8
 80015fe:	001a      	movs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3308      	adds	r3, #8
 8001608:	001a      	movs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	b002      	add	sp, #8
 800161a:	bd80      	pop	{r7, pc}

0800161c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b002      	add	sp, #8
 8001630:	bd80      	pop	{r7, pc}

08001632 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	601a      	str	r2, [r3, #0]
}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	b004      	add	sp, #16
 8001674:	bd80      	pop	{r7, pc}

08001676 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3301      	adds	r3, #1
 800168a:	d103      	bne.n	8001694 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	e00c      	b.n	80016ae <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3308      	adds	r3, #8
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	e002      	b.n	80016a2 <vListInsert+0x2c>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d2f6      	bcs.n	800169c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	601a      	str	r2, [r3, #0]
}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	b004      	add	sp, #16
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6892      	ldr	r2, [r2, #8]
 80016f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6852      	ldr	r2, [r2, #4]
 8001702:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	d103      	bne.n	8001716 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	1e5a      	subs	r2, r3, #1
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
}
 800172a:	0018      	movs	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	b004      	add	sp, #16
 8001730:	bd80      	pop	{r7, pc}

08001732 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001732:	b590      	push	{r4, r7, lr}
 8001734:	b08d      	sub	sp, #52	; 0x34
 8001736:	af04      	add	r7, sp, #16
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <xTaskCreateStatic+0x18>
 8001746:	b672      	cpsid	i
 8001748:	e7fe      	b.n	8001748 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800174a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <xTaskCreateStatic+0x22>
 8001750:	b672      	cpsid	i
 8001752:	e7fe      	b.n	8001752 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001754:	23b4      	movs	r3, #180	; 0xb4
 8001756:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2bb4      	cmp	r3, #180	; 0xb4
 800175c:	d001      	beq.n	8001762 <xTaskCreateStatic+0x30>
 800175e:	b672      	cpsid	i
 8001760:	e7fe      	b.n	8001760 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <xTaskCreateStatic+0x78>
 8001768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176a:	2b00      	cmp	r3, #0
 800176c:	d01d      	beq.n	80017aa <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800176e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001770:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001776:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	22b1      	movs	r2, #177	; 0xb1
 800177c:	2102      	movs	r1, #2
 800177e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001780:	683c      	ldr	r4, [r7, #0]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	2300      	movs	r3, #0
 800178a:	9303      	str	r3, [sp, #12]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	9302      	str	r3, [sp, #8]
 8001790:	2318      	movs	r3, #24
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	0023      	movs	r3, r4
 800179c:	f000 f858 	bl	8001850 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	0018      	movs	r0, r3
 80017a4:	f000 f8e4 	bl	8001970 <prvAddNewTaskToReadyList>
 80017a8:	e001      	b.n	80017ae <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80017ae:	69bb      	ldr	r3, [r7, #24]
	}
 80017b0:	0018      	movs	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b009      	add	sp, #36	; 0x24
 80017b6:	bd90      	pop	{r4, r7, pc}

080017b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b08d      	sub	sp, #52	; 0x34
 80017bc:	af04      	add	r7, sp, #16
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	1dbb      	adds	r3, r7, #6
 80017c6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017c8:	1dbb      	adds	r3, r7, #6
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	0018      	movs	r0, r3
 80017d0:	f000 fdce 	bl	8002370 <pvPortMalloc>
 80017d4:	0003      	movs	r3, r0
 80017d6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d010      	beq.n	8001800 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80017de:	20b4      	movs	r0, #180	; 0xb4
 80017e0:	f000 fdc6 	bl	8002370 <pvPortMalloc>
 80017e4:	0003      	movs	r3, r0
 80017e6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
 80017f4:	e006      	b.n	8001804 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f000 fe5f 	bl	80024bc <vPortFree>
 80017fe:	e001      	b.n	8001804 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d01a      	beq.n	8001840 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	22b1      	movs	r2, #177	; 0xb1
 800180e:	2100      	movs	r1, #0
 8001810:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001812:	1dbb      	adds	r3, r7, #6
 8001814:	881a      	ldrh	r2, [r3, #0]
 8001816:	683c      	ldr	r4, [r7, #0]
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	2300      	movs	r3, #0
 800181e:	9303      	str	r3, [sp, #12]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	0023      	movs	r3, r4
 800182e:	f000 f80f 	bl	8001850 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	0018      	movs	r0, r3
 8001836:	f000 f89b 	bl	8001970 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800183a:	2301      	movs	r3, #1
 800183c:	61bb      	str	r3, [r7, #24]
 800183e:	e002      	b.n	8001846 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001840:	2301      	movs	r3, #1
 8001842:	425b      	negs	r3, r3
 8001844:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001846:	69bb      	ldr	r3, [r7, #24]
	}
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b009      	add	sp, #36	; 0x24
 800184e:	bd90      	pop	{r4, r7, pc}

08001850 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800185e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	493e      	ldr	r1, [pc, #248]	; (8001960 <prvInitialiseNewTask+0x110>)
 8001866:	468c      	mov	ip, r1
 8001868:	4463      	add	r3, ip
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	18d3      	adds	r3, r2, r3
 800186e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	2207      	movs	r2, #7
 8001874:	4393      	bics	r3, r2
 8001876:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2207      	movs	r2, #7
 800187c:	4013      	ands	r3, r2
 800187e:	d001      	beq.n	8001884 <prvInitialiseNewTask+0x34>
 8001880:	b672      	cpsid	i
 8001882:	e7fe      	b.n	8001882 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e013      	b.n	80018b2 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	18d3      	adds	r3, r2, r3
 8001890:	7818      	ldrb	r0, [r3, #0]
 8001892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001894:	2134      	movs	r1, #52	; 0x34
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	18d3      	adds	r3, r2, r3
 800189a:	185b      	adds	r3, r3, r1
 800189c:	1c02      	adds	r2, r0, #0
 800189e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	18d3      	adds	r3, r2, r3
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	3301      	adds	r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d9e8      	bls.n	800188a <prvInitialiseNewTask+0x3a>
 80018b8:	e000      	b.n	80018bc <prvInitialiseNewTask+0x6c>
		{
			break;
 80018ba:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80018bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018be:	2243      	movs	r2, #67	; 0x43
 80018c0:	2100      	movs	r1, #0
 80018c2:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d901      	bls.n	80018ce <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80018ca:	2306      	movs	r3, #6
 80018cc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80018ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d0:	6a3a      	ldr	r2, [r7, #32]
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80018d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d6:	6a3a      	ldr	r2, [r7, #32]
 80018d8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80018da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018dc:	2200      	movs	r2, #0
 80018de:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80018e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e2:	3304      	adds	r3, #4
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7ff fe99 	bl	800161c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80018ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ec:	3318      	adds	r3, #24
 80018ee:	0018      	movs	r0, r3
 80018f0:	f7ff fe94 	bl	800161c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80018f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	2207      	movs	r2, #7
 80018fe:	1ad2      	subs	r2, r2, r3
 8001900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001902:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190c:	22ac      	movs	r2, #172	; 0xac
 800190e:	2100      	movs	r1, #0
 8001910:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001914:	22b0      	movs	r2, #176	; 0xb0
 8001916:	2100      	movs	r1, #0
 8001918:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191c:	334c      	adds	r3, #76	; 0x4c
 800191e:	2260      	movs	r2, #96	; 0x60
 8001920:	2100      	movs	r1, #0
 8001922:	0018      	movs	r0, r3
 8001924:	f000 ff02 	bl	800272c <memset>
 8001928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <prvInitialiseNewTask+0x114>)
 800192c:	651a      	str	r2, [r3, #80]	; 0x50
 800192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001930:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <prvInitialiseNewTask+0x118>)
 8001932:	655a      	str	r2, [r3, #84]	; 0x54
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	4a0d      	ldr	r2, [pc, #52]	; (800196c <prvInitialiseNewTask+0x11c>)
 8001938:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	68f9      	ldr	r1, [r7, #12]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	0018      	movs	r0, r3
 8001942:	f000 fbe1 	bl	8002108 <pxPortInitialiseStack>
 8001946:	0002      	movs	r2, r0
 8001948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001956:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b006      	add	sp, #24
 800195e:	bd80      	pop	{r7, pc}
 8001960:	3fffffff 	.word	0x3fffffff
 8001964:	080029b0 	.word	0x080029b0
 8001968:	080029d0 	.word	0x080029d0
 800196c:	08002990 	.word	0x08002990

08001970 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001978:	f000 fc62 	bl	8002240 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <prvAddNewTaskToReadyList+0xb0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <prvAddNewTaskToReadyList+0xb0>)
 8001984:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001986:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <prvAddNewTaskToReadyList+0xb4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <prvAddNewTaskToReadyList+0xb4>)
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <prvAddNewTaskToReadyList+0xb0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d110      	bne.n	80019be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800199c:	f000 fa80 	bl	8001ea0 <prvInitialiseTaskLists>
 80019a0:	e00d      	b.n	80019be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80019a2:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <prvAddNewTaskToReadyList+0xb8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <prvAddNewTaskToReadyList+0xb4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d802      	bhi.n	80019be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <prvAddNewTaskToReadyList+0xb4>)
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <prvAddNewTaskToReadyList+0xbc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <prvAddNewTaskToReadyList+0xbc>)
 80019c6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <prvAddNewTaskToReadyList+0xc0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d903      	bls.n	80019dc <prvAddNewTaskToReadyList+0x6c>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <prvAddNewTaskToReadyList+0xc0>)
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e0:	0013      	movs	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	189b      	adds	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <prvAddNewTaskToReadyList+0xc4>)
 80019ea:	189a      	adds	r2, r3, r2
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3304      	adds	r3, #4
 80019f0:	0019      	movs	r1, r3
 80019f2:	0010      	movs	r0, r2
 80019f4:	f7ff fe1d 	bl	8001632 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80019f8:	f000 fc34 	bl	8002264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <prvAddNewTaskToReadyList+0xb8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <prvAddNewTaskToReadyList+0xb4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d201      	bcs.n	8001a16 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001a12:	f000 fc05 	bl	8002220 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b002      	add	sp, #8
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	2000044c 	.word	0x2000044c
 8001a24:	2000034c 	.word	0x2000034c
 8001a28:	20000458 	.word	0x20000458
 8001a2c:	20000468 	.word	0x20000468
 8001a30:	20000454 	.word	0x20000454
 8001a34:	20000350 	.word	0x20000350

08001a38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d010      	beq.n	8001a6c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <vTaskDelay+0x48>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <vTaskDelay+0x1e>
 8001a52:	b672      	cpsid	i
 8001a54:	e7fe      	b.n	8001a54 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8001a56:	f000 f86d 	bl	8001b34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f000 fafe 	bl	8002060 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001a64:	f000 f872 	bl	8001b4c <xTaskResumeAll>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8001a72:	f000 fbd5 	bl	8002220 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	b004      	add	sp, #16
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	20000474 	.word	0x20000474

08001a84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001a92:	003a      	movs	r2, r7
 8001a94:	1d39      	adds	r1, r7, #4
 8001a96:	2308      	movs	r3, #8
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f7fe fc42 	bl	8000324 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001aa0:	683c      	ldr	r4, [r7, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	491b      	ldr	r1, [pc, #108]	; (8001b14 <vTaskStartScheduler+0x90>)
 8001aa8:	481b      	ldr	r0, [pc, #108]	; (8001b18 <vTaskStartScheduler+0x94>)
 8001aaa:	9202      	str	r2, [sp, #8]
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	0022      	movs	r2, r4
 8001ab6:	f7ff fe3c 	bl	8001732 <xTaskCreateStatic>
 8001aba:	0002      	movs	r2, r0
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <vTaskStartScheduler+0x98>)
 8001abe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <vTaskStartScheduler+0x98>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	e001      	b.n	8001ad2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d113      	bne.n	8001b00 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001ad8:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <vTaskStartScheduler+0x9c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	334c      	adds	r3, #76	; 0x4c
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <vTaskStartScheduler+0xa0>)
 8001ae4:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <vTaskStartScheduler+0xa4>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4252      	negs	r2, r2
 8001aec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <vTaskStartScheduler+0xa8>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <vTaskStartScheduler+0xac>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001afa:	f000 fb6d 	bl	80021d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001afe:	e004      	b.n	8001b0a <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3301      	adds	r3, #1
 8001b04:	d101      	bne.n	8001b0a <vTaskStartScheduler+0x86>
 8001b06:	b672      	cpsid	i
 8001b08:	e7fe      	b.n	8001b08 <vTaskStartScheduler+0x84>
}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b005      	add	sp, #20
 8001b10:	bd90      	pop	{r4, r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	0800293c 	.word	0x0800293c
 8001b18:	08001e81 	.word	0x08001e81
 8001b1c:	20000470 	.word	0x20000470
 8001b20:	2000034c 	.word	0x2000034c
 8001b24:	20000010 	.word	0x20000010
 8001b28:	2000046c 	.word	0x2000046c
 8001b2c:	20000458 	.word	0x20000458
 8001b30:	20000450 	.word	0x20000450

08001b34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <vTaskSuspendAll+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <vTaskSuspendAll+0x14>)
 8001b40:	601a      	str	r2, [r3, #0]
}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000474 	.word	0x20000474

08001b4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001b5a:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <xTaskResumeAll+0xf8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <xTaskResumeAll+0x1a>
 8001b62:	b672      	cpsid	i
 8001b64:	e7fe      	b.n	8001b64 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001b66:	f000 fb6b 	bl	8002240 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001b6a:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <xTaskResumeAll+0xf8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	1e5a      	subs	r2, r3, #1
 8001b70:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <xTaskResumeAll+0xf8>)
 8001b72:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b74:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <xTaskResumeAll+0xf8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d15b      	bne.n	8001c34 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <xTaskResumeAll+0xfc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d057      	beq.n	8001c34 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b84:	e02f      	b.n	8001be6 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001b86:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <xTaskResumeAll+0x100>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	3318      	adds	r3, #24
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7ff fda5 	bl	80016e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff fda0 	bl	80016e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <xTaskResumeAll+0x104>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d903      	bls.n	8001bb6 <xTaskResumeAll+0x6a>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <xTaskResumeAll+0x104>)
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bba:	0013      	movs	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	189b      	adds	r3, r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4a24      	ldr	r2, [pc, #144]	; (8001c54 <xTaskResumeAll+0x108>)
 8001bc4:	189a      	adds	r2, r3, r2
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	0019      	movs	r1, r3
 8001bcc:	0010      	movs	r0, r2
 8001bce:	f7ff fd30 	bl	8001632 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <xTaskResumeAll+0x10c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d302      	bcc.n	8001be6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8001be0:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <xTaskResumeAll+0x110>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001be6:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <xTaskResumeAll+0x100>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1cb      	bne.n	8001b86 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001bf4:	f000 f9f4 	bl	8001fe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <xTaskResumeAll+0x114>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00f      	beq.n	8001c24 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001c04:	f000 f82e 	bl	8001c64 <xTaskIncrementTick>
 8001c08:	1e03      	subs	r3, r0, #0
 8001c0a:	d002      	beq.n	8001c12 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <xTaskResumeAll+0x110>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f2      	bne.n	8001c04 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <xTaskResumeAll+0x114>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <xTaskResumeAll+0x110>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001c30:	f000 faf6 	bl	8002220 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001c34:	f000 fb16 	bl	8002264 <vPortExitCritical>

	return xAlreadyYielded;
 8001c38:	68bb      	ldr	r3, [r7, #8]
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b004      	add	sp, #16
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	20000474 	.word	0x20000474
 8001c48:	2000044c 	.word	0x2000044c
 8001c4c:	2000040c 	.word	0x2000040c
 8001c50:	20000454 	.word	0x20000454
 8001c54:	20000350 	.word	0x20000350
 8001c58:	2000034c 	.word	0x2000034c
 8001c5c:	20000460 	.word	0x20000460
 8001c60:	2000045c 	.word	0x2000045c

08001c64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c6e:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <xTaskIncrementTick+0x13c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d000      	beq.n	8001c78 <xTaskIncrementTick+0x14>
 8001c76:	e083      	b.n	8001d80 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c78:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <xTaskIncrementTick+0x140>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001c80:	4b48      	ldr	r3, [pc, #288]	; (8001da4 <xTaskIncrementTick+0x140>)
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d117      	bne.n	8001cbc <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8001c8c:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <xTaskIncrementTick+0x144>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <xTaskIncrementTick+0x36>
 8001c96:	b672      	cpsid	i
 8001c98:	e7fe      	b.n	8001c98 <xTaskIncrementTick+0x34>
 8001c9a:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <xTaskIncrementTick+0x144>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	4b42      	ldr	r3, [pc, #264]	; (8001dac <xTaskIncrementTick+0x148>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <xTaskIncrementTick+0x144>)
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	4b40      	ldr	r3, [pc, #256]	; (8001dac <xTaskIncrementTick+0x148>)
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	4b40      	ldr	r3, [pc, #256]	; (8001db0 <xTaskIncrementTick+0x14c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	4b3e      	ldr	r3, [pc, #248]	; (8001db0 <xTaskIncrementTick+0x14c>)
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	f000 f992 	bl	8001fe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001cbc:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <xTaskIncrementTick+0x150>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d34e      	bcc.n	8001d64 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cc6:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <xTaskIncrementTick+0x144>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <xTaskIncrementTick+0x70>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <xTaskIncrementTick+0x72>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cda:	4b36      	ldr	r3, [pc, #216]	; (8001db4 <xTaskIncrementTick+0x150>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4252      	negs	r2, r2
 8001ce0:	601a      	str	r2, [r3, #0]
					break;
 8001ce2:	e03f      	b.n	8001d64 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ce4:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <xTaskIncrementTick+0x144>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d203      	bcs.n	8001d04 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <xTaskIncrementTick+0x150>)
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	601a      	str	r2, [r3, #0]
						break;
 8001d02:	e02f      	b.n	8001d64 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	3304      	adds	r3, #4
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f7ff fcea 	bl	80016e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d004      	beq.n	8001d20 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3318      	adds	r3, #24
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f7ff fce1 	bl	80016e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d24:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <xTaskIncrementTick+0x154>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d903      	bls.n	8001d34 <xTaskIncrementTick+0xd0>
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <xTaskIncrementTick+0x154>)
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d38:	0013      	movs	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	189b      	adds	r3, r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <xTaskIncrementTick+0x158>)
 8001d42:	189a      	adds	r2, r3, r2
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	3304      	adds	r3, #4
 8001d48:	0019      	movs	r1, r3
 8001d4a:	0010      	movs	r0, r2
 8001d4c:	f7ff fc71 	bl	8001632 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <xTaskIncrementTick+0x15c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d3b3      	bcc.n	8001cc6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d62:	e7b0      	b.n	8001cc6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <xTaskIncrementTick+0x15c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d6a:	4914      	ldr	r1, [pc, #80]	; (8001dbc <xTaskIncrementTick+0x158>)
 8001d6c:	0013      	movs	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	189b      	adds	r3, r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	585b      	ldr	r3, [r3, r1]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d907      	bls.n	8001d8a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e004      	b.n	8001d8a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <xTaskIncrementTick+0x160>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <xTaskIncrementTick+0x160>)
 8001d88:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <xTaskIncrementTick+0x164>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8001d92:	2301      	movs	r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001d96:	697b      	ldr	r3, [r7, #20]
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b006      	add	sp, #24
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000474 	.word	0x20000474
 8001da4:	20000450 	.word	0x20000450
 8001da8:	20000404 	.word	0x20000404
 8001dac:	20000408 	.word	0x20000408
 8001db0:	20000464 	.word	0x20000464
 8001db4:	2000046c 	.word	0x2000046c
 8001db8:	20000454 	.word	0x20000454
 8001dbc:	20000350 	.word	0x20000350
 8001dc0:	2000034c 	.word	0x2000034c
 8001dc4:	2000045c 	.word	0x2000045c
 8001dc8:	20000460 	.word	0x20000460

08001dcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <vTaskSwitchContext+0x9c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <vTaskSwitchContext+0xa0>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001de0:	e03d      	b.n	8001e5e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <vTaskSwitchContext+0xa0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <vTaskSwitchContext+0xa4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	e007      	b.n	8001e00 <vTaskSwitchContext+0x34>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <vTaskSwitchContext+0x2e>
 8001df6:	b672      	cpsid	i
 8001df8:	e7fe      	b.n	8001df8 <vTaskSwitchContext+0x2c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	491c      	ldr	r1, [pc, #112]	; (8001e74 <vTaskSwitchContext+0xa8>)
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	0013      	movs	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	189b      	adds	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	585b      	ldr	r3, [r3, r1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0ee      	beq.n	8001df0 <vTaskSwitchContext+0x24>
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	0013      	movs	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	189b      	adds	r3, r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <vTaskSwitchContext+0xa8>)
 8001e1e:	189b      	adds	r3, r3, r2
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	3308      	adds	r3, #8
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d104      	bne.n	8001e42 <vTaskSwitchContext+0x76>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <vTaskSwitchContext+0xac>)
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <vTaskSwitchContext+0xa4>)
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <vTaskSwitchContext+0xac>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	334c      	adds	r3, #76	; 0x4c
 8001e58:	001a      	movs	r2, r3
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <vTaskSwitchContext+0xb0>)
 8001e5c:	601a      	str	r2, [r3, #0]
}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b002      	add	sp, #8
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	20000474 	.word	0x20000474
 8001e6c:	20000460 	.word	0x20000460
 8001e70:	20000454 	.word	0x20000454
 8001e74:	20000350 	.word	0x20000350
 8001e78:	2000034c 	.word	0x2000034c
 8001e7c:	20000010 	.word	0x20000010

08001e80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001e88:	f000 f84e 	bl	8001f28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <prvIdleTask+0x1c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d9f9      	bls.n	8001e88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001e94:	f000 f9c4 	bl	8002220 <vPortYield>
		prvCheckTasksWaitingTermination();
 8001e98:	e7f6      	b.n	8001e88 <prvIdleTask+0x8>
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	20000350 	.word	0x20000350

08001ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	e00c      	b.n	8001ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	0013      	movs	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	189b      	adds	r3, r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <prvInitialiseTaskLists+0x68>)
 8001eb8:	189b      	adds	r3, r3, r2
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7ff fb90 	bl	80015e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b06      	cmp	r3, #6
 8001eca:	d9ef      	bls.n	8001eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <prvInitialiseTaskLists+0x6c>)
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff fb86 	bl	80015e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <prvInitialiseTaskLists+0x70>)
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff fb82 	bl	80015e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <prvInitialiseTaskLists+0x74>)
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f7ff fb7e 	bl	80015e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <prvInitialiseTaskLists+0x78>)
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f7ff fb7a 	bl	80015e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <prvInitialiseTaskLists+0x7c>)
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f7ff fb76 	bl	80015e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <prvInitialiseTaskLists+0x80>)
 8001ef6:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <prvInitialiseTaskLists+0x6c>)
 8001ef8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <prvInitialiseTaskLists+0x84>)
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <prvInitialiseTaskLists+0x70>)
 8001efe:	601a      	str	r2, [r3, #0]
}
 8001f00:	46c0      	nop			; (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b002      	add	sp, #8
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000350 	.word	0x20000350
 8001f0c:	200003dc 	.word	0x200003dc
 8001f10:	200003f0 	.word	0x200003f0
 8001f14:	2000040c 	.word	0x2000040c
 8001f18:	20000420 	.word	0x20000420
 8001f1c:	20000438 	.word	0x20000438
 8001f20:	20000404 	.word	0x20000404
 8001f24:	20000408 	.word	0x20000408

08001f28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f2e:	e01a      	b.n	8001f66 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8001f30:	f000 f986 	bl	8002240 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <prvCheckTasksWaitingTermination+0x50>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7ff fbce 	bl	80016e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <prvCheckTasksWaitingTermination+0x54>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1e5a      	subs	r2, r3, #1
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <prvCheckTasksWaitingTermination+0x54>)
 8001f4e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <prvCheckTasksWaitingTermination+0x58>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	1e5a      	subs	r2, r3, #1
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <prvCheckTasksWaitingTermination+0x58>)
 8001f58:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8001f5a:	f000 f983 	bl	8002264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	0018      	movs	r0, r3
 8001f62:	f000 f80f 	bl	8001f84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <prvCheckTasksWaitingTermination+0x58>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1e0      	bne.n	8001f30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000420 	.word	0x20000420
 8001f7c:	2000044c 	.word	0x2000044c
 8001f80:	20000434 	.word	0x20000434

08001f84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	334c      	adds	r3, #76	; 0x4c
 8001f90:	0018      	movs	r0, r3
 8001f92:	f000 fc2b 	bl	80027ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	22b1      	movs	r2, #177	; 0xb1
 8001f9a:	5c9b      	ldrb	r3, [r3, r2]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d109      	bne.n	8001fb4 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f000 fa89 	bl	80024bc <vPortFree>
				vPortFree( pxTCB );
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	0018      	movs	r0, r3
 8001fae:	f000 fa85 	bl	80024bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001fb2:	e010      	b.n	8001fd6 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	22b1      	movs	r2, #177	; 0xb1
 8001fb8:	5c9b      	ldrb	r3, [r3, r2]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d104      	bne.n	8001fc8 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f000 fa7b 	bl	80024bc <vPortFree>
	}
 8001fc6:	e006      	b.n	8001fd6 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	22b1      	movs	r2, #177	; 0xb1
 8001fcc:	5c9b      	ldrb	r3, [r3, r2]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d001      	beq.n	8001fd6 <prvDeleteTCB+0x52>
 8001fd2:	b672      	cpsid	i
 8001fd4:	e7fe      	b.n	8001fd4 <prvDeleteTCB+0x50>
	}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <prvResetNextTaskUnblockTime+0x40>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <prvResetNextTaskUnblockTime+0x14>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <prvResetNextTaskUnblockTime+0x16>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d004      	beq.n	8002004 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <prvResetNextTaskUnblockTime+0x44>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4252      	negs	r2, r2
 8002000:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002002:	e008      	b.n	8002016 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <prvResetNextTaskUnblockTime+0x40>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <prvResetNextTaskUnblockTime+0x44>)
 8002014:	601a      	str	r2, [r3, #0]
}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	b002      	add	sp, #8
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	20000404 	.word	0x20000404
 8002024:	2000046c 	.word	0x2000046c

08002028 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <xTaskGetSchedulerState+0x30>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002036:	2301      	movs	r3, #1
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	e008      	b.n	800204e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <xTaskGetSchedulerState+0x34>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002044:	2302      	movs	r3, #2
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	e001      	b.n	800204e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800204e:	687b      	ldr	r3, [r7, #4]
	}
 8002050:	0018      	movs	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	b002      	add	sp, #8
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000458 	.word	0x20000458
 800205c:	20000474 	.word	0x20000474

08002060 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800206a:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3304      	adds	r3, #4
 8002076:	0018      	movs	r0, r3
 8002078:	f7ff fb33 	bl	80016e2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3301      	adds	r3, #1
 8002080:	d10b      	bne.n	800209a <prvAddCurrentTaskToDelayedList+0x3a>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	1d1a      	adds	r2, r3, #4
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8002090:	0011      	movs	r1, r2
 8002092:	0018      	movs	r0, r3
 8002094:	f7ff facd 	bl	8001632 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002098:	e026      	b.n	80020e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	18d3      	adds	r3, r2, r3
 80020a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d209      	bcs.n	80020c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3304      	adds	r3, #4
 80020bc:	0019      	movs	r1, r3
 80020be:	0010      	movs	r0, r2
 80020c0:	f7ff fad9 	bl	8001676 <vListInsert>
}
 80020c4:	e010      	b.n	80020e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <prvAddCurrentTaskToDelayedList+0xa0>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3304      	adds	r3, #4
 80020d0:	0019      	movs	r1, r3
 80020d2:	0010      	movs	r0, r2
 80020d4:	f7ff facf 	bl	8001676 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <prvAddCurrentTaskToDelayedList+0xa4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d202      	bcs.n	80020e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <prvAddCurrentTaskToDelayedList+0xa4>)
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	601a      	str	r2, [r3, #0]
}
 80020e8:	46c0      	nop			; (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b004      	add	sp, #16
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000450 	.word	0x20000450
 80020f4:	2000034c 	.word	0x2000034c
 80020f8:	20000438 	.word	0x20000438
 80020fc:	20000408 	.word	0x20000408
 8002100:	20000404 	.word	0x20000404
 8002104:	2000046c 	.word	0x2000046c

08002108 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3b04      	subs	r3, #4
 8002118:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2280      	movs	r2, #128	; 0x80
 800211e:	0452      	lsls	r2, r2, #17
 8002120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3b04      	subs	r3, #4
 8002126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3b04      	subs	r3, #4
 8002132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002134:	4a08      	ldr	r2, [pc, #32]	; (8002158 <pxPortInitialiseStack+0x50>)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3b14      	subs	r3, #20
 800213e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3b20      	subs	r3, #32
 800214a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800214c:	68fb      	ldr	r3, [r7, #12]
}
 800214e:	0018      	movs	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	b004      	add	sp, #16
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	0800215d 	.word	0x0800215d

0800215c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <prvTaskExitError+0x2c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	d001      	beq.n	8002172 <prvTaskExitError+0x16>
 800216e:	b672      	cpsid	i
 8002170:	e7fe      	b.n	8002170 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8002172:	b672      	cpsid	i
	while( ulDummy == 0 )
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0fc      	beq.n	8002176 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	b002      	add	sp, #8
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	2000000c 	.word	0x2000000c

0800218c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

080021a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80021a0:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <pxCurrentTCBConst2>)
 80021a2:	6813      	ldr	r3, [r2, #0]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	3020      	adds	r0, #32
 80021a8:	f380 8809 	msr	PSP, r0
 80021ac:	2002      	movs	r0, #2
 80021ae:	f380 8814 	msr	CONTROL, r0
 80021b2:	f3bf 8f6f 	isb	sy
 80021b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80021b8:	46ae      	mov	lr, r5
 80021ba:	bc08      	pop	{r3}
 80021bc:	bc04      	pop	{r2}
 80021be:	b662      	cpsie	i
 80021c0:	4718      	bx	r3
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	46c0      	nop			; (mov r8, r8)
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46c0      	nop			; (mov r8, r8)

080021d0 <pxCurrentTCBConst2>:
 80021d0:	2000034c 	.word	0x2000034c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46c0      	nop			; (mov r8, r8)

080021d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <xPortStartScheduler+0x40>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <xPortStartScheduler+0x40>)
 80021e2:	21ff      	movs	r1, #255	; 0xff
 80021e4:	0409      	lsls	r1, r1, #16
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <xPortStartScheduler+0x40>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <xPortStartScheduler+0x40>)
 80021f0:	21ff      	movs	r1, #255	; 0xff
 80021f2:	0609      	lsls	r1, r1, #24
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80021f8:	f000 f898 	bl	800232c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <xPortStartScheduler+0x44>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8002202:	f7ff ffcd 	bl	80021a0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002206:	f7ff fde1 	bl	8001dcc <vTaskSwitchContext>
	prvTaskExitError();
 800220a:	f7ff ffa7 	bl	800215c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800220e:	2300      	movs	r3, #0
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	e000ed20 	.word	0xe000ed20
 800221c:	2000000c 	.word	0x2000000c

08002220 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <vPortYield+0x1c>)
 8002226:	2280      	movs	r2, #128	; 0x80
 8002228:	0552      	lsls	r2, r2, #21
 800222a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800222c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002230:	f3bf 8f6f 	isb	sy
}
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	e000ed04 	.word	0xe000ed04

08002240 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002244:	b672      	cpsid	i
    uxCriticalNesting++;
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <vPortEnterCritical+0x20>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <vPortEnterCritical+0x20>)
 800224e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8002250:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002254:	f3bf 8f6f 	isb	sy
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	2000000c 	.word	0x2000000c

08002264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <vPortExitCritical+0x2c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <vPortExitCritical+0x10>
 8002270:	b672      	cpsid	i
 8002272:	e7fe      	b.n	8002272 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <vPortExitCritical+0x2c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <vPortExitCritical+0x2c>)
 800227c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <vPortExitCritical+0x2c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d100      	bne.n	8002288 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8002286:	b662      	cpsie	i
    }
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	2000000c 	.word	0x2000000c

08002294 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8002294:	f3ef 8010 	mrs	r0, PRIMASK
 8002298:	b672      	cpsid	i
 800229a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	0018      	movs	r0, r3

080022a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80022a0:	f380 8810 	msr	PRIMASK, r0
 80022a4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80022a6:	46c0      	nop			; (mov r8, r8)
	...

080022b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80022b0:	f3ef 8009 	mrs	r0, PSP
 80022b4:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <pxCurrentTCBConst>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	3820      	subs	r0, #32
 80022ba:	6010      	str	r0, [r2, #0]
 80022bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80022be:	4644      	mov	r4, r8
 80022c0:	464d      	mov	r5, r9
 80022c2:	4656      	mov	r6, sl
 80022c4:	465f      	mov	r7, fp
 80022c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80022c8:	b508      	push	{r3, lr}
 80022ca:	b672      	cpsid	i
 80022cc:	f7ff fd7e 	bl	8001dcc <vTaskSwitchContext>
 80022d0:	b662      	cpsie	i
 80022d2:	bc0c      	pop	{r2, r3}
 80022d4:	6811      	ldr	r1, [r2, #0]
 80022d6:	6808      	ldr	r0, [r1, #0]
 80022d8:	3010      	adds	r0, #16
 80022da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80022dc:	46a0      	mov	r8, r4
 80022de:	46a9      	mov	r9, r5
 80022e0:	46b2      	mov	sl, r6
 80022e2:	46bb      	mov	fp, r7
 80022e4:	f380 8809 	msr	PSP, r0
 80022e8:	3820      	subs	r0, #32
 80022ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80022ec:	4718      	bx	r3
 80022ee:	46c0      	nop			; (mov r8, r8)

080022f0 <pxCurrentTCBConst>:
 80022f0:	2000034c 	.word	0x2000034c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46c0      	nop			; (mov r8, r8)

080022f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80022fe:	f7ff ffc9 	bl	8002294 <ulSetInterruptMaskFromISR>
 8002302:	0003      	movs	r3, r0
 8002304:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002306:	f7ff fcad 	bl	8001c64 <xTaskIncrementTick>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d003      	beq.n	8002316 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <xPortSysTickHandler+0x30>)
 8002310:	2280      	movs	r2, #128	; 0x80
 8002312:	0552      	lsls	r2, r2, #21
 8002314:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff ffc1 	bl	80022a0 <vClearInterruptMaskFromISR>
}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	b002      	add	sp, #8
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	e000ed04 	.word	0xe000ed04

0800232c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <prvSetupTimerInterrupt+0x34>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <prvSetupTimerInterrupt+0x38>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <prvSetupTimerInterrupt+0x3c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	22fa      	movs	r2, #250	; 0xfa
 8002342:	0091      	lsls	r1, r2, #2
 8002344:	0018      	movs	r0, r3
 8002346:	f7fd fedf 	bl	8000108 <__udivsi3>
 800234a:	0003      	movs	r3, r0
 800234c:	001a      	movs	r2, r3
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <prvSetupTimerInterrupt+0x40>)
 8002350:	3a01      	subs	r2, #1
 8002352:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8002354:	4b02      	ldr	r3, [pc, #8]	; (8002360 <prvSetupTimerInterrupt+0x34>)
 8002356:	2207      	movs	r2, #7
 8002358:	601a      	str	r2, [r3, #0]
}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	e000e010 	.word	0xe000e010
 8002364:	e000e018 	.word	0xe000e018
 8002368:	20000000 	.word	0x20000000
 800236c:	e000e014 	.word	0xe000e014

08002370 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800237c:	f7ff fbda 	bl	8001b34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002380:	4b49      	ldr	r3, [pc, #292]	; (80024a8 <pvPortMalloc+0x138>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002388:	f000 f8e0 	bl	800254c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800238c:	4b47      	ldr	r3, [pc, #284]	; (80024ac <pvPortMalloc+0x13c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4013      	ands	r3, r2
 8002394:	d000      	beq.n	8002398 <pvPortMalloc+0x28>
 8002396:	e079      	b.n	800248c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d012      	beq.n	80023c4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800239e:	2208      	movs	r2, #8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	189b      	adds	r3, r3, r2
 80023a4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2207      	movs	r2, #7
 80023aa:	4013      	ands	r3, r2
 80023ac:	d00a      	beq.n	80023c4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2207      	movs	r2, #7
 80023b2:	4393      	bics	r3, r2
 80023b4:	3308      	adds	r3, #8
 80023b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2207      	movs	r2, #7
 80023bc:	4013      	ands	r3, r2
 80023be:	d001      	beq.n	80023c4 <pvPortMalloc+0x54>
 80023c0:	b672      	cpsid	i
 80023c2:	e7fe      	b.n	80023c2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d060      	beq.n	800248c <pvPortMalloc+0x11c>
 80023ca:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <pvPortMalloc+0x140>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d85b      	bhi.n	800248c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80023d4:	4b37      	ldr	r3, [pc, #220]	; (80024b4 <pvPortMalloc+0x144>)
 80023d6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80023d8:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <pvPortMalloc+0x144>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023de:	e004      	b.n	80023ea <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d903      	bls.n	80023fc <pvPortMalloc+0x8c>
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f1      	bne.n	80023e0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80023fc:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <pvPortMalloc+0x138>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	429a      	cmp	r2, r3
 8002404:	d042      	beq.n	800248c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2208      	movs	r2, #8
 800240c:	189b      	adds	r3, r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	1ad2      	subs	r2, r2, r3
 8002420:	2308      	movs	r3, #8
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	429a      	cmp	r2, r3
 8002426:	d916      	bls.n	8002456 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	18d3      	adds	r3, r2, r3
 800242e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2207      	movs	r2, #7
 8002434:	4013      	ands	r3, r2
 8002436:	d001      	beq.n	800243c <pvPortMalloc+0xcc>
 8002438:	b672      	cpsid	i
 800243a:	e7fe      	b.n	800243a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	1ad2      	subs	r2, r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	0018      	movs	r0, r3
 8002452:	f000 f8db 	bl	800260c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <pvPortMalloc+0x140>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	1ad2      	subs	r2, r2, r3
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <pvPortMalloc+0x140>)
 8002462:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <pvPortMalloc+0x140>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <pvPortMalloc+0x148>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d203      	bcs.n	8002478 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <pvPortMalloc+0x140>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <pvPortMalloc+0x148>)
 8002476:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <pvPortMalloc+0x13c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	431a      	orrs	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800248c:	f7ff fb5e 	bl	8001b4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2207      	movs	r2, #7
 8002494:	4013      	ands	r3, r2
 8002496:	d001      	beq.n	800249c <pvPortMalloc+0x12c>
 8002498:	b672      	cpsid	i
 800249a:	e7fe      	b.n	800249a <pvPortMalloc+0x12a>
	return pvReturn;
 800249c:	68fb      	ldr	r3, [r7, #12]
}
 800249e:	0018      	movs	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b006      	add	sp, #24
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	20001080 	.word	0x20001080
 80024ac:	2000108c 	.word	0x2000108c
 80024b0:	20001084 	.word	0x20001084
 80024b4:	20001078 	.word	0x20001078
 80024b8:	20001088 	.word	0x20001088

080024bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d035      	beq.n	800253a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80024ce:	2308      	movs	r3, #8
 80024d0:	425b      	negs	r3, r3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	18d3      	adds	r3, r2, r3
 80024d6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <vPortFree+0x88>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4013      	ands	r3, r2
 80024e6:	d101      	bne.n	80024ec <vPortFree+0x30>
 80024e8:	b672      	cpsid	i
 80024ea:	e7fe      	b.n	80024ea <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <vPortFree+0x3c>
 80024f4:	b672      	cpsid	i
 80024f6:	e7fe      	b.n	80024f6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <vPortFree+0x88>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4013      	ands	r3, r2
 8002502:	d01a      	beq.n	800253a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d116      	bne.n	800253a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <vPortFree+0x88>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	43db      	mvns	r3, r3
 8002516:	401a      	ands	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800251c:	f7ff fb0a 	bl	8001b34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <vPortFree+0x8c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	18d2      	adds	r2, r2, r3
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <vPortFree+0x8c>)
 800252c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 f86b 	bl	800260c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002536:	f7ff fb09 	bl	8001b4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	46bd      	mov	sp, r7
 800253e:	b004      	add	sp, #16
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	2000108c 	.word	0x2000108c
 8002548:	20001084 	.word	0x20001084

0800254c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002552:	23c0      	movs	r3, #192	; 0xc0
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002558:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <prvHeapInit+0xa8>)
 800255a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2207      	movs	r2, #7
 8002560:	4013      	ands	r3, r2
 8002562:	d00c      	beq.n	800257e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3307      	adds	r3, #7
 8002568:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2207      	movs	r2, #7
 800256e:	4393      	bics	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1ad2      	subs	r2, r2, r3
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <prvHeapInit+0xa8>)
 800257a:	18d3      	adds	r3, r2, r3
 800257c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <prvHeapInit+0xac>)
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <prvHeapInit+0xac>)
 800258a:	2200      	movs	r2, #0
 800258c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	18d3      	adds	r3, r2, r3
 8002594:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002596:	2208      	movs	r2, #8
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2207      	movs	r2, #7
 80025a2:	4393      	bics	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <prvHeapInit+0xb0>)
 80025aa:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <prvHeapInit+0xb0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2200      	movs	r2, #0
 80025b2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <prvHeapInit+0xb0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	1ad2      	subs	r2, r2, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80025ca:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <prvHeapInit+0xb0>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <prvHeapInit+0xb4>)
 80025d8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <prvHeapInit+0xb8>)
 80025e0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <prvHeapInit+0xbc>)
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	0612      	lsls	r2, r2, #24
 80025e8:	601a      	str	r2, [r3, #0]
}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b004      	add	sp, #16
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	20000478 	.word	0x20000478
 80025f8:	20001078 	.word	0x20001078
 80025fc:	20001080 	.word	0x20001080
 8002600:	20001088 	.word	0x20001088
 8002604:	20001084 	.word	0x20001084
 8002608:	2000108c 	.word	0x2000108c

0800260c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <prvInsertBlockIntoFreeList+0xa8>)
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	e002      	b.n	8002620 <prvInsertBlockIntoFreeList+0x14>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	429a      	cmp	r2, r3
 8002628:	d8f7      	bhi.n	800261a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	18d3      	adds	r3, r2, r3
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	d108      	bne.n	800264e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	18d2      	adds	r2, r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	18d2      	adds	r2, r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d118      	bne.n	8002694 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <prvInsertBlockIntoFreeList+0xac>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d00d      	beq.n	800268a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	18d2      	adds	r2, r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	e008      	b.n	800269c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <prvInsertBlockIntoFreeList+0xac>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e003      	b.n	800269c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d002      	beq.n	80026aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b004      	add	sp, #16
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	20001078 	.word	0x20001078
 80026b8:	20001080 	.word	0x20001080

080026bc <_ZdlPvj>:
 80026bc:	b510      	push	{r4, lr}
 80026be:	f000 f801 	bl	80026c4 <_ZdlPv>
 80026c2:	bd10      	pop	{r4, pc}

080026c4 <_ZdlPv>:
 80026c4:	b510      	push	{r4, lr}
 80026c6:	f000 f827 	bl	8002718 <free>
 80026ca:	bd10      	pop	{r4, pc}

080026cc <__libc_init_array>:
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	2600      	movs	r6, #0
 80026d0:	4d0c      	ldr	r5, [pc, #48]	; (8002704 <__libc_init_array+0x38>)
 80026d2:	4c0d      	ldr	r4, [pc, #52]	; (8002708 <__libc_init_array+0x3c>)
 80026d4:	1b64      	subs	r4, r4, r5
 80026d6:	10a4      	asrs	r4, r4, #2
 80026d8:	42a6      	cmp	r6, r4
 80026da:	d109      	bne.n	80026f0 <__libc_init_array+0x24>
 80026dc:	2600      	movs	r6, #0
 80026de:	f000 f8fb 	bl	80028d8 <_init>
 80026e2:	4d0a      	ldr	r5, [pc, #40]	; (800270c <__libc_init_array+0x40>)
 80026e4:	4c0a      	ldr	r4, [pc, #40]	; (8002710 <__libc_init_array+0x44>)
 80026e6:	1b64      	subs	r4, r4, r5
 80026e8:	10a4      	asrs	r4, r4, #2
 80026ea:	42a6      	cmp	r6, r4
 80026ec:	d105      	bne.n	80026fa <__libc_init_array+0x2e>
 80026ee:	bd70      	pop	{r4, r5, r6, pc}
 80026f0:	00b3      	lsls	r3, r6, #2
 80026f2:	58eb      	ldr	r3, [r5, r3]
 80026f4:	4798      	blx	r3
 80026f6:	3601      	adds	r6, #1
 80026f8:	e7ee      	b.n	80026d8 <__libc_init_array+0xc>
 80026fa:	00b3      	lsls	r3, r6, #2
 80026fc:	58eb      	ldr	r3, [r5, r3]
 80026fe:	4798      	blx	r3
 8002700:	3601      	adds	r6, #1
 8002702:	e7f2      	b.n	80026ea <__libc_init_array+0x1e>
 8002704:	080029f0 	.word	0x080029f0
 8002708:	080029f0 	.word	0x080029f0
 800270c:	080029f0 	.word	0x080029f0
 8002710:	080029f4 	.word	0x080029f4

08002714 <__retarget_lock_acquire_recursive>:
 8002714:	4770      	bx	lr

08002716 <__retarget_lock_release_recursive>:
 8002716:	4770      	bx	lr

08002718 <free>:
 8002718:	b510      	push	{r4, lr}
 800271a:	4b03      	ldr	r3, [pc, #12]	; (8002728 <free+0x10>)
 800271c:	0001      	movs	r1, r0
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	f000 f80c 	bl	800273c <_free_r>
 8002724:	bd10      	pop	{r4, pc}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	20000010 	.word	0x20000010

0800272c <memset>:
 800272c:	0003      	movs	r3, r0
 800272e:	1882      	adds	r2, r0, r2
 8002730:	4293      	cmp	r3, r2
 8002732:	d100      	bne.n	8002736 <memset+0xa>
 8002734:	4770      	bx	lr
 8002736:	7019      	strb	r1, [r3, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	e7f9      	b.n	8002730 <memset+0x4>

0800273c <_free_r>:
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	0005      	movs	r5, r0
 8002740:	2900      	cmp	r1, #0
 8002742:	d010      	beq.n	8002766 <_free_r+0x2a>
 8002744:	1f0c      	subs	r4, r1, #4
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	da00      	bge.n	800274e <_free_r+0x12>
 800274c:	18e4      	adds	r4, r4, r3
 800274e:	0028      	movs	r0, r5
 8002750:	f000 f8b2 	bl	80028b8 <__malloc_lock>
 8002754:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <_free_r+0x90>)
 8002756:	6813      	ldr	r3, [r2, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <_free_r+0x2c>
 800275c:	6063      	str	r3, [r4, #4]
 800275e:	6014      	str	r4, [r2, #0]
 8002760:	0028      	movs	r0, r5
 8002762:	f000 f8b1 	bl	80028c8 <__malloc_unlock>
 8002766:	bd70      	pop	{r4, r5, r6, pc}
 8002768:	42a3      	cmp	r3, r4
 800276a:	d908      	bls.n	800277e <_free_r+0x42>
 800276c:	6821      	ldr	r1, [r4, #0]
 800276e:	1860      	adds	r0, r4, r1
 8002770:	4283      	cmp	r3, r0
 8002772:	d1f3      	bne.n	800275c <_free_r+0x20>
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	1841      	adds	r1, r0, r1
 800277a:	6021      	str	r1, [r4, #0]
 800277c:	e7ee      	b.n	800275c <_free_r+0x20>
 800277e:	001a      	movs	r2, r3
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <_free_r+0x4e>
 8002786:	42a3      	cmp	r3, r4
 8002788:	d9f9      	bls.n	800277e <_free_r+0x42>
 800278a:	6811      	ldr	r1, [r2, #0]
 800278c:	1850      	adds	r0, r2, r1
 800278e:	42a0      	cmp	r0, r4
 8002790:	d10b      	bne.n	80027aa <_free_r+0x6e>
 8002792:	6820      	ldr	r0, [r4, #0]
 8002794:	1809      	adds	r1, r1, r0
 8002796:	1850      	adds	r0, r2, r1
 8002798:	6011      	str	r1, [r2, #0]
 800279a:	4283      	cmp	r3, r0
 800279c:	d1e0      	bne.n	8002760 <_free_r+0x24>
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	1841      	adds	r1, r0, r1
 80027a4:	6011      	str	r1, [r2, #0]
 80027a6:	6053      	str	r3, [r2, #4]
 80027a8:	e7da      	b.n	8002760 <_free_r+0x24>
 80027aa:	42a0      	cmp	r0, r4
 80027ac:	d902      	bls.n	80027b4 <_free_r+0x78>
 80027ae:	230c      	movs	r3, #12
 80027b0:	602b      	str	r3, [r5, #0]
 80027b2:	e7d5      	b.n	8002760 <_free_r+0x24>
 80027b4:	6821      	ldr	r1, [r4, #0]
 80027b6:	1860      	adds	r0, r4, r1
 80027b8:	4283      	cmp	r3, r0
 80027ba:	d103      	bne.n	80027c4 <_free_r+0x88>
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	1841      	adds	r1, r0, r1
 80027c2:	6021      	str	r1, [r4, #0]
 80027c4:	6063      	str	r3, [r4, #4]
 80027c6:	6054      	str	r4, [r2, #4]
 80027c8:	e7ca      	b.n	8002760 <_free_r+0x24>
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	20001094 	.word	0x20001094

080027d0 <cleanup_glue>:
 80027d0:	b570      	push	{r4, r5, r6, lr}
 80027d2:	000d      	movs	r5, r1
 80027d4:	6809      	ldr	r1, [r1, #0]
 80027d6:	0004      	movs	r4, r0
 80027d8:	2900      	cmp	r1, #0
 80027da:	d001      	beq.n	80027e0 <cleanup_glue+0x10>
 80027dc:	f7ff fff8 	bl	80027d0 <cleanup_glue>
 80027e0:	0029      	movs	r1, r5
 80027e2:	0020      	movs	r0, r4
 80027e4:	f7ff ffaa 	bl	800273c <_free_r>
 80027e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080027ec <_reclaim_reent>:
 80027ec:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <_reclaim_reent+0xc8>)
 80027ee:	b570      	push	{r4, r5, r6, lr}
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	0004      	movs	r4, r0
 80027f4:	4283      	cmp	r3, r0
 80027f6:	d049      	beq.n	800288c <_reclaim_reent+0xa0>
 80027f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <_reclaim_reent+0x28>
 80027fe:	2500      	movs	r5, #0
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	42ab      	cmp	r3, r5
 8002804:	d147      	bne.n	8002896 <_reclaim_reent+0xaa>
 8002806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	2900      	cmp	r1, #0
 800280c:	d002      	beq.n	8002814 <_reclaim_reent+0x28>
 800280e:	0020      	movs	r0, r4
 8002810:	f7ff ff94 	bl	800273c <_free_r>
 8002814:	6961      	ldr	r1, [r4, #20]
 8002816:	2900      	cmp	r1, #0
 8002818:	d002      	beq.n	8002820 <_reclaim_reent+0x34>
 800281a:	0020      	movs	r0, r4
 800281c:	f7ff ff8e 	bl	800273c <_free_r>
 8002820:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002822:	2900      	cmp	r1, #0
 8002824:	d002      	beq.n	800282c <_reclaim_reent+0x40>
 8002826:	0020      	movs	r0, r4
 8002828:	f7ff ff88 	bl	800273c <_free_r>
 800282c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800282e:	2900      	cmp	r1, #0
 8002830:	d002      	beq.n	8002838 <_reclaim_reent+0x4c>
 8002832:	0020      	movs	r0, r4
 8002834:	f7ff ff82 	bl	800273c <_free_r>
 8002838:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800283a:	2900      	cmp	r1, #0
 800283c:	d002      	beq.n	8002844 <_reclaim_reent+0x58>
 800283e:	0020      	movs	r0, r4
 8002840:	f7ff ff7c 	bl	800273c <_free_r>
 8002844:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002846:	2900      	cmp	r1, #0
 8002848:	d002      	beq.n	8002850 <_reclaim_reent+0x64>
 800284a:	0020      	movs	r0, r4
 800284c:	f7ff ff76 	bl	800273c <_free_r>
 8002850:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002852:	2900      	cmp	r1, #0
 8002854:	d002      	beq.n	800285c <_reclaim_reent+0x70>
 8002856:	0020      	movs	r0, r4
 8002858:	f7ff ff70 	bl	800273c <_free_r>
 800285c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800285e:	2900      	cmp	r1, #0
 8002860:	d002      	beq.n	8002868 <_reclaim_reent+0x7c>
 8002862:	0020      	movs	r0, r4
 8002864:	f7ff ff6a 	bl	800273c <_free_r>
 8002868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800286a:	2900      	cmp	r1, #0
 800286c:	d002      	beq.n	8002874 <_reclaim_reent+0x88>
 800286e:	0020      	movs	r0, r4
 8002870:	f7ff ff64 	bl	800273c <_free_r>
 8002874:	69a3      	ldr	r3, [r4, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <_reclaim_reent+0xa0>
 800287a:	0020      	movs	r0, r4
 800287c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800287e:	4798      	blx	r3
 8002880:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002882:	2900      	cmp	r1, #0
 8002884:	d002      	beq.n	800288c <_reclaim_reent+0xa0>
 8002886:	0020      	movs	r0, r4
 8002888:	f7ff ffa2 	bl	80027d0 <cleanup_glue>
 800288c:	bd70      	pop	{r4, r5, r6, pc}
 800288e:	5949      	ldr	r1, [r1, r5]
 8002890:	2900      	cmp	r1, #0
 8002892:	d108      	bne.n	80028a6 <_reclaim_reent+0xba>
 8002894:	3504      	adds	r5, #4
 8002896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002898:	68d9      	ldr	r1, [r3, #12]
 800289a:	2d80      	cmp	r5, #128	; 0x80
 800289c:	d1f7      	bne.n	800288e <_reclaim_reent+0xa2>
 800289e:	0020      	movs	r0, r4
 80028a0:	f7ff ff4c 	bl	800273c <_free_r>
 80028a4:	e7af      	b.n	8002806 <_reclaim_reent+0x1a>
 80028a6:	680e      	ldr	r6, [r1, #0]
 80028a8:	0020      	movs	r0, r4
 80028aa:	f7ff ff47 	bl	800273c <_free_r>
 80028ae:	0031      	movs	r1, r6
 80028b0:	e7ee      	b.n	8002890 <_reclaim_reent+0xa4>
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	20000010 	.word	0x20000010

080028b8 <__malloc_lock>:
 80028b8:	b510      	push	{r4, lr}
 80028ba:	4802      	ldr	r0, [pc, #8]	; (80028c4 <__malloc_lock+0xc>)
 80028bc:	f7ff ff2a 	bl	8002714 <__retarget_lock_acquire_recursive>
 80028c0:	bd10      	pop	{r4, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	20001090 	.word	0x20001090

080028c8 <__malloc_unlock>:
 80028c8:	b510      	push	{r4, lr}
 80028ca:	4802      	ldr	r0, [pc, #8]	; (80028d4 <__malloc_unlock+0xc>)
 80028cc:	f7ff ff23 	bl	8002716 <__retarget_lock_release_recursive>
 80028d0:	bd10      	pop	{r4, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	20001090 	.word	0x20001090

080028d8 <_init>:
 80028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028de:	bc08      	pop	{r3}
 80028e0:	469e      	mov	lr, r3
 80028e2:	4770      	bx	lr

080028e4 <_fini>:
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ea:	bc08      	pop	{r3}
 80028ec:	469e      	mov	lr, r3
 80028ee:	4770      	bx	lr
